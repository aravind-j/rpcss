[{"path":"https://aravind-j.github.io/rpcss/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"J. Aravind. Author, maintainer.","code":""},{"path":"https://aravind-j.github.io/rpcss/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Aravind, J. ().  rpcss: Constitution Core Collections Principal Component Scoring Strategy. R package version 0.0.0.9000, https://aravind-j.github.io/rpcss/.","code":"@Manual{,   title = {rpcss: Constitution of Core Collections by Principal Component Scoring Strategy},   author = {J. Aravind},   note = {R package version 0.0.0.9000 https://aravind-j.github.io/rpcss/}, }"},{"path":[]},{"path":[]},{"path":"https://aravind-j.github.io/rpcss/index.html","id":"aravind-j","dir":"","previous_headings":"rpcss: Constitution of Core Collections by Principal Component Scoring Strategy","what":"Aravind, J.","title":"Constitution of Core Collections by Principal Component Scoring Strategy","text":"Division Germplasm Conservation, ICAR-National Bureau Plant Genetic Resources, New Delhi.","code":""},{"path":"https://aravind-j.github.io/rpcss/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Constitution of Core Collections by Principal Component Scoring Strategy","text":"Generate Core Collection Principal Component ScoringStrategy (PCSS) using qualitative /quantitative trait data accordingto Hamon Noirot 1990<https://www.documentation.ird.fr/hor/fdi:36506>,Noirot et al. 1996 <doi:10.2307/2527837> Noirot et al. 2003<https://www.documentation.ird.fr/hor/fdi:010031886>.","code":""},{"path":"https://aravind-j.github.io/rpcss/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Constitution of Core Collections by Principal Component Scoring Strategy","text":"development version can installed github follows:","code":"# Install development version from Github devtools::install_github(\"aravind-j/rpcss\")"},{"path":"https://aravind-j.github.io/rpcss/index.html","id":"whats-new","dir":"","previous_headings":"","what":"What’s new","title":"Constitution of Core Collections by Principal Component Scoring Strategy","text":"know whats new version type:","code":"news(package='rpcss')"},{"path":"https://aravind-j.github.io/rpcss/index.html","id":"links","dir":"","previous_headings":"","what":"Links","title":"Constitution of Core Collections by Principal Component Scoring Strategy","text":"Github page Documentation website","code":""},{"path":"https://aravind-j.github.io/rpcss/index.html","id":"citing-rpcss","dir":"","previous_headings":"","what":"Citing rpcss","title":"Constitution of Core Collections by Principal Component Scoring Strategy","text":"cite methods package use:","code":"citation(\"rpcss\") To cite the R package 'rpcss' in publications use:    Aravind, J. ().  rpcss: Constitution of Core Collections by Principal Component Scoring Strategy. R package version 0.1.0,   https://aravind-j.github.io/rpcss/.  A BibTeX entry for LaTeX users is    @Manual{,     title = {rpcss: Constitution of Core Collections by Principal Component Scoring Strategy},     author = {J. Aravind},     note = {R package version 0.1.0 https://aravind-j.github.io/rpcss/},   }  This free and open-source software implements academic research by the authors and co-workers. If you use it, please support the project by citing the package."},{"path":"https://aravind-j.github.io/rpcss/reference/biplot.pcss.core.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Biplots from pcss.core Output — biplot.pcss.core","title":"Generate Biplots from pcss.core Output — biplot.pcss.core","text":"biplot.pcss.core generates biplots scores genotypes without vectors traits output pcss.core.","code":""},{"path":"https://aravind-j.github.io/rpcss/reference/biplot.pcss.core.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Biplots from pcss.core Output — biplot.pcss.core","text":"","code":"# S3 method for class 'pcss.core' biplot(   x,   ndim = 3,   highlight.core = c(\"size\", \"variance\", \"logistic\", \"none\"),   show.traits = c(\"all\", \"none\", \"quantitative\", \"qualitative\"),   qual.scale = 1,   quant.scale = 1,   point.alpha = 0.8,   segment.alpha = 0.8,   ... )"},{"path":"https://aravind-j.github.io/rpcss/reference/biplot.pcss.core.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Biplots from pcss.core Output — biplot.pcss.core","text":"x object class pcss.core. ndim number dimensions biplots plotted. highlight.core core collection highlighted. Either \"size\", \"variance\", \"logistic\", \"none\". See Details. show.traits kind traits shown biplot. Either \"\", \"none\", \"quantitative\" \"qualitative\". qual.scale scale factor applied qualitative trait coordinates plotted biplot. quant.scale scale factor applied quantitative trait coordinates plotted biplot. point.alpha Alpha transparency value biplot points. segment.alpha Alpha transparency value biplot segments. ... Unused.","code":""},{"path":"https://aravind-j.github.io/rpcss/reference/biplot.pcss.core.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Biplots from pcss.core Output — biplot.pcss.core","text":"list biplots ggplot objects.","code":""},{"path":"https://aravind-j.github.io/rpcss/reference/biplot.pcss.core.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Biplots from pcss.core Output — biplot.pcss.core","text":"Use \"size\" highlight core collection according threshold size criterion use \"variance\" highlight core collection according variability threshold criterion use  \"logistic\" highlight core collection generated according inflection point rate progress cumulative variability retained identified logistic regression. Use \"none\" highlight accessions.","code":""},{"path":[]},{"path":"https://aravind-j.github.io/rpcss/reference/biplot.pcss.core.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Biplots from pcss.core Output — biplot.pcss.core","text":"","code":"#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # Prepare example data #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  suppressPackageStartupMessages(library(EvaluateCore))  # Get data from EvaluateCore  data(\"cassava_EC\", package = \"EvaluateCore\") data = cbind(Genotypes = rownames(cassava_EC), cassava_EC) quant <- c(\"NMSR\", \"TTRN\", \"TFWSR\", \"TTRW\", \"TFWSS\", \"TTSW\", \"TTPW\", \"AVPW\",            \"ARSR\", \"SRDM\") qual <- c(\"CUAL\", \"LNGS\", \"PTLC\", \"DSTA\", \"LFRT\", \"LBTEF\", \"CBTR\", \"NMLB\",           \"ANGB\", \"CUAL9M\", \"LVC9M\", \"TNPR9M\", \"PL9M\", \"STRP\", \"STRC\",           \"PSTR\") rownames(data) <- NULL  # Convert qualitative data columns to factor data[, qual] <- lapply(data[, qual], as.factor)   library(FactoMineR) suppressPackageStartupMessages(library(factoextra))  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # With quantitative data #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  out1 <- pcss.core(data = data, names = \"Genotypes\",                   quantitative = quant,                   qualitative = NULL, eigen.threshold = NULL, size = 0.2,                   var.threshold = 0.75)  # \\donttest{ # Plot biplot biplot(out1, ndim = 3, highlight.core = \"size\", quant.scale = 3,        point.alpha = 0.5) #> $`Dim 1 vs. Dim 2`  #>  #> $`Dim 1 vs. Dim 3` #> Warning: ggrepel: 4 unlabeled data points (too many overlaps). Consider increasing max.overlaps  #>  #> $`Dim 2 vs. Dim 3`  #>   # Plot biplot with FactoMineR plot(out1$raw.out, choix=c(\"ind\"), label  = \"none\", axes = c(1, 2))   plot(out1$raw.out, choix=c(\"ind\"), label  = \"none\", axes = c(1, 3))   plot(out1$raw.out, choix=c(\"ind\"), label  = \"none\", axes = c(2, 3))   # Plot biplot with factoextra fviz_pca_biplot(out1$raw.out, geom.ind = \"point\", axes = c(1, 2))   fviz_pca_biplot(out1$raw.out, geom.ind = \"point\", axes = c(1, 3))   fviz_pca_biplot(out1$raw.out, geom.ind = \"point\", axes = c(2, 3))  # }  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # Get core sets with PCSS (qualitative data) #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  out2 <- pcss.core(data = data, names = \"Genotypes\", quantitative = NULL,                   qualitative = qual, eigen.threshold = NULL,                   size = 0.2, var.threshold = 0.75)  # \\donttest{ # Plot biplot biplot(out2, ndim = 3, highlight.core = \"size\", qual.scale = 1,        point.alpha = 0.5) #> $`Dim 1 vs. Dim 2` #> Warning: ggrepel: 30 unlabeled data points (too many overlaps). Consider increasing max.overlaps  #>  #> $`Dim 1 vs. Dim 3` #> Warning: ggrepel: 51 unlabeled data points (too many overlaps). Consider increasing max.overlaps  #>  #> $`Dim 2 vs. Dim 3` #> Warning: ggrepel: 50 unlabeled data points (too many overlaps). Consider increasing max.overlaps  #>   # Plot biplot with FactoMineR plot(out2$raw.out, choix=c(\"ind\"), label  = \"none\", axes = c(1, 2))   plot(out2$raw.out, choix=c(\"ind\"), label  = \"none\", axes = c(1, 3))   plot(out2$raw.out, choix=c(\"ind\"), label  = \"none\", axes = c(2, 3))   # Plot biplot with factoextra fviz_mca_biplot(out2$raw.out, geom.ind = \"point\", axes = c(1, 2))   fviz_mca_biplot(out2$raw.out, geom.ind = \"point\", axes = c(1, 3))   fviz_mca_biplot(out2$raw.out, geom.ind = \"point\", axes = c(2, 3))  # }  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # Get core sets with PCSS (quantitative and qualitative data) #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  out3 <- pcss.core(data = data, names = \"Genotypes\",                   quantitative = quant,                   qualitative = qual, eigen.threshold = NULL)  # \\donttest{ # Plot biplot biplot(out3, ndim = 3, highlight.core = \"size\",        quant.scale = 3, qual.scale = 1,        point.alpha = 0.5) #> $`Dim 1 vs. Dim 2` #> Warning: ggrepel: 77 unlabeled data points (too many overlaps). Consider increasing max.overlaps  #>  #> $`Dim 1 vs. Dim 3` #> Warning: ggrepel: 68 unlabeled data points (too many overlaps). Consider increasing max.overlaps  #>  #> $`Dim 2 vs. Dim 3` #> Warning: ggrepel: 69 unlabeled data points (too many overlaps). Consider increasing max.overlaps  #>   # Plot biplot with FactoMineR plot(out3$raw.out, choix=c(\"ind\"), label  = \"none\", axes = c(1, 2)) #> Warning: ggrepel: 1662 unlabeled data points (too many overlaps). Consider increasing max.overlaps #> Warning: ggrepel: 65 unlabeled data points (too many overlaps). Consider increasing max.overlaps   plot(out3$raw.out, choix=c(\"ind\"), label  = \"none\", axes = c(1, 3)) #> Warning: ggrepel: 1671 unlabeled data points (too many overlaps). Consider increasing max.overlaps #> Warning: ggrepel: 59 unlabeled data points (too many overlaps). Consider increasing max.overlaps   plot(out3$raw.out, choix=c(\"ind\"), label  = \"none\", axes = c(2, 3)) #> Warning: ggrepel: 1663 unlabeled data points (too many overlaps). Consider increasing max.overlaps #> Warning: ggrepel: 58 unlabeled data points (too many overlaps). Consider increasing max.overlaps   # Plot biplot with factoextra  # Fix rownames row.names(out3$raw.out$quali.var$coord) <-   unlist(lapply(seq_along(data[, qual]),                 function(i) paste(qual[i],                                   levels(data[, qual[i]]), sep = \"_\")))  fviz_famd_ind(out3$raw.out, geom = \"point\", axes = c(1, 2))   fviz_famd_ind(out3$raw.out, geom = \"point\", axes = c(1, 3))   fviz_famd_ind(out3$raw.out, geom = \"point\", axes = c(2, 3))  # }"},{"path":"https://aravind-j.github.io/rpcss/reference/contrib.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Contribution or Loadings of Traits for each Dimension/Factor from pcss.core Output — contrib","title":"Plot Contribution or Loadings of Traits for each Dimension/Factor from pcss.core Output — contrib","text":"contrib.pcss.core generates bar plots contributions loadings (\"right singular vectors\") traits dimension/factor output pcss.core.","code":""},{"path":"https://aravind-j.github.io/rpcss/reference/contrib.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Contribution or Loadings of Traits for each Dimension/Factor from pcss.core Output — contrib","text":"","code":"contrib(x, ...)  # Default S3 method contrib(   x,   ndim = NULL,   plot.loadings = FALSE,   use.sign = TRUE,   sort.value = TRUE,   ... )  # S3 method for class 'pcss.core' contrib(   x,   ndim = NULL,   plot.loadings = FALSE,   use.sign = TRUE,   sort.value = TRUE,   ... )  contrib(x, ...)"},{"path":"https://aravind-j.github.io/rpcss/reference/contrib.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Contribution or Loadings of Traits for each Dimension/Factor from pcss.core Output — contrib","text":"x object class pcss.core. ... Unused. ndim number dimensions contribution loadings traits plotted. plot.loadings TRUE, loadings \"right singular vectors\" plotted instead contributions. Default FALSE. use.sign TRUE, contributions variables given sign corresponding coordinates. Default TRUE. sort.value TRUE, bars sorted according value.","code":""},{"path":"https://aravind-j.github.io/rpcss/reference/contrib.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Contribution or Loadings of Traits for each Dimension/Factor from pcss.core Output — contrib","text":"contributions/loadings bar plot ggplot object.","code":""},{"path":[]},{"path":"https://aravind-j.github.io/rpcss/reference/contrib.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Contribution or Loadings of Traits for each Dimension/Factor from pcss.core Output — contrib","text":"","code":"#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # Prepare example data #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  suppressPackageStartupMessages(library(EvaluateCore))  # Get data from EvaluateCore  data(\"cassava_EC\", package = \"EvaluateCore\") data = cbind(Genotypes = rownames(cassava_EC), cassava_EC) quant <- c(\"NMSR\", \"TTRN\", \"TFWSR\", \"TTRW\", \"TFWSS\", \"TTSW\", \"TTPW\", \"AVPW\",            \"ARSR\", \"SRDM\") qual <- c(\"CUAL\", \"LNGS\", \"PTLC\", \"DSTA\", \"LFRT\", \"LBTEF\", \"CBTR\", \"NMLB\",           \"ANGB\", \"CUAL9M\", \"LVC9M\", \"TNPR9M\", \"PL9M\", \"STRP\", \"STRC\",           \"PSTR\") rownames(data) <- NULL  # Convert qualitative data columns to factor data[, qual] <- lapply(data[, qual], as.factor)   library(FactoMineR) suppressPackageStartupMessages(library(factoextra))  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # With quantitative data #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  out1 <- pcss.core(data = data, names = \"Genotypes\",                   quantitative = quant,                   qualitative = NULL, eigen.threshold = NULL, size = 0.2,                   var.threshold = 0.75)  # \\donttest{ # Plot contributions of genotypes - with sign - sorted contrib(x = out1, ndim = 5)   # Plot contributions of genotypes - without sign - sorted contrib(x = out1, ndim = 5, use.sign = FALSE)   # Plot loadings/coordinates of genotypes - with sign - sorted contrib(x = out1, ndim = 5, plot.loadings = TRUE)   # Plot contributions of genotypes - with sign - unsorted contrib(x = out1, ndim = 5, sort.value = FALSE)   # Plot biplot with factoextra fviz_contrib(out1$raw.out, choice = \"var\", axes = 1)  fviz_contrib(out1$raw.out, choice = \"var\", axes = 2)  # }  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # Get core sets with PCSS (qualitative data) #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  out2 <- pcss.core(data = data, names = \"Genotypes\", quantitative = NULL,                   qualitative = qual, eigen.threshold = NULL,                   size = 0.2, var.threshold = 0.75)  # \\donttest{ # Plot contributions of genotypes - with sign - sorted contrib(x = out2, ndim = 5)   # Plot contributions of genotypes - without sign - sorted contrib(x = out2, ndim = 5, use.sign = FALSE)   # Plot loadings/coordinates of genotypes - with sign - sorted contrib(x = out2, ndim = 5, plot.loadings = TRUE)   # Plot contributions of genotypes - with sign - unsorted contrib(x = out2, ndim = 5, sort.value = FALSE)   # Plot biplot with factoextra fviz_contrib(out2$raw.out, choice = \"var\", axes = 1)  fviz_contrib(out2$raw.out, choice = \"var\", axes = 2)  # }  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # Get core sets with PCSS (quantitative and qualitative data) #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  out3 <- pcss.core(data = data, names = \"Genotypes\",                   quantitative = quant,                   qualitative = qual, eigen.threshold = NULL)  # \\donttest{ # Plot contributions of genotypes - sorted contrib(x = out3, ndim = 5)   # Plot contributions of genotypes - without sign - sorted contrib(x = out3, ndim = 5, use.sign = FALSE)   # Plot loadings/coordinates of genotypes - sorted contrib(x = out3, ndim = 5, plot.loadings = TRUE)   # Plot contributions of genotypes - with sign - unsorted contrib(x = out3, ndim = 5, sort.value = FALSE)   # Plot biplot with factoextra # fviz_contrib(out3$raw.out, choice = \"quanti.var\", axes = 1) # fviz_contrib(out3$raw.out, choice = \"quali.var\", axes = 1) # fviz_contrib(out3$raw.out, choice = \"quanti.var\", axes = 2) # fviz_contrib(out3$raw.out, choice = \"quali.var\", axes = 2) # }"},{"path":"https://aravind-j.github.io/rpcss/reference/coreplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot the cumulative variability retained by individuals/genotypes from pcss.core Output — coreplot","title":"Plot the cumulative variability retained by individuals/genotypes from pcss.core Output — coreplot","text":"coreplot.pcss.core generates plots cumulative variability retained individuals/genotypes pcss.core Output. size core collection corresponding cumulative variance retained highlighted according criterion used.","code":""},{"path":"https://aravind-j.github.io/rpcss/reference/coreplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot the cumulative variability retained by individuals/genotypes from pcss.core Output — coreplot","text":"","code":"coreplot(x, ...)  # Default S3 method coreplot(x, criterion = c(\"size\", \"variance\", \"logistic\"), ...)  # S3 method for class 'pcss.core' coreplot(x, criterion = c(\"size\", \"variance\", \"logistic\"), ...)  coreplot(x, ...)"},{"path":"https://aravind-j.github.io/rpcss/reference/coreplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot the cumulative variability retained by individuals/genotypes from pcss.core Output — coreplot","text":"x object class pcss.core. ... Unused. criterion core collection generation criterion. Either \"size\", \"variance\", \"logistic\". See Details.","code":""},{"path":"https://aravind-j.github.io/rpcss/reference/coreplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot the cumulative variability retained by individuals/genotypes from pcss.core Output — coreplot","text":"plot cumulative variability retained individuals/genotypes   ggplot object. case criterion = \"logistic\", list   plots cumulative variability retained individuals/genotypes   rate progress cumulative contribution variability. size   variability retained core collection highlighted plot.","code":""},{"path":"https://aravind-j.github.io/rpcss/reference/coreplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot the cumulative variability retained by individuals/genotypes from pcss.core Output — coreplot","text":"Use \"size\" highlight core collection according threshold size criterion use \"variance\" highlight core collection according variability threshold criterion use  \"logistic\" highlight core collection generated according inflection point rate progress cumulative variability retained identified logistic regression.","code":""},{"path":[]},{"path":"https://aravind-j.github.io/rpcss/reference/coreplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot the cumulative variability retained by individuals/genotypes from pcss.core Output — coreplot","text":"","code":"#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # Prepare example data #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  suppressPackageStartupMessages(library(EvaluateCore))  # Get data from EvaluateCore  data(\"cassava_EC\", package = \"EvaluateCore\") data = cbind(Genotypes = rownames(cassava_EC), cassava_EC) quant <- c(\"NMSR\", \"TTRN\", \"TFWSR\", \"TTRW\", \"TFWSS\", \"TTSW\", \"TTPW\", \"AVPW\",            \"ARSR\", \"SRDM\") qual <- c(\"CUAL\", \"LNGS\", \"PTLC\", \"DSTA\", \"LFRT\", \"LBTEF\", \"CBTR\", \"NMLB\",           \"ANGB\", \"CUAL9M\", \"LVC9M\", \"TNPR9M\", \"PL9M\", \"STRP\", \"STRC\",           \"PSTR\") rownames(data) <- NULL  # Convert qualitative data columns to factor data[, qual] <- lapply(data[, qual], as.factor)   library(FactoMineR) suppressPackageStartupMessages(library(factoextra))  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # With quantitative data #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  out1 <- pcss.core(data = data, names = \"Genotypes\",                   quantitative = quant,                   qualitative = NULL, eigen.threshold = NULL, size = 0.2,                   var.threshold = 0.75)  # For core set constituted by size criterion coreplot(x = out1, criterion = \"size\")   # For core set constituted by variance criterion coreplot(x = out1, criterion = \"variance\")   # For core set constituted by logistic regression criterion coreplot(x = out1, criterion = \"logistic\") #> $`Cumulative contribution`  #>  #> $`Rate of cumulative contribution`  #>   #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # Get core sets with PCSS (qualitative data) #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  out2 <- pcss.core(data = data, names = \"Genotypes\", quantitative = NULL,                   qualitative = qual, eigen.threshold = NULL,                   size = 0.2, var.threshold = 0.75)  # For core set constituted by size criterion coreplot(x = out2, criterion = \"size\")   # For core set constituted by variance criterion coreplot(x = out2, criterion = \"variance\")   # For core set constituted by logistic regression criterion coreplot(x = out2, criterion = \"logistic\") #> $`Cumulative contribution`  #>  #> $`Rate of cumulative contribution`  #>   #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # Get core sets with PCSS (quantitative and qualitative data) #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  out3 <- pcss.core(data = data, names = \"Genotypes\",                   quantitative = quant,                   qualitative = qual, eigen.threshold = NULL)  # For core set constituted by size criterion coreplot(x = out3, criterion = \"size\")   # For core set constituted by variance criterion coreplot(x = out3, criterion = \"variance\")   # For core set constituted by logistic regression criterion coreplot(x = out3, criterion = \"logistic\") #> $`Cumulative contribution`  #>  #> $`Rate of cumulative contribution`  #>"},{"path":"https://aravind-j.github.io/rpcss/reference/pcss.core.html","id":null,"dir":"Reference","previous_headings":"","what":"Principal Component Scoring to Generate Core collections — pcss.core","title":"Principal Component Scoring to Generate Core collections — pcss.core","text":"Generate Core Collection Principal Component Scoring Strategy (PCSS) (Hamon Noirot 1990; Noirot et al. 1996; Noirot et al. 2003)  using qualitative /quantitative trait data.","code":""},{"path":"https://aravind-j.github.io/rpcss/reference/pcss.core.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Principal Component Scoring to Generate Core collections — pcss.core","text":"","code":"pcss.core(   data,   names,   quantitative,   qualitative,   eigen.threshold = NULL,   size = 0.2,   var.threshold = 0.75 )"},{"path":"https://aravind-j.github.io/rpcss/reference/pcss.core.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Principal Component Scoring to Generate Core collections — pcss.core","text":"data data data frame object. data frame possess one row per individual columns individual names multiple trait/character data. names Name column individual/genotype names character string. quantitative Name columns quantitative traits character vector. qualitative Name columns qualitative traits character vector. eigen.threshold lower limit eigen value factors included estimation. default value average eigen values. size desired core set size proportion. var.threshold desired proportion total variability ","code":""},{"path":"https://aravind-j.github.io/rpcss/reference/pcss.core.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Principal Component Scoring to Generate Core collections — pcss.core","text":"list class pcss.core following components. details details core set generation process. raw.original output PCA,   CA FAMD functions   FactoMineR eigen data frame   eigen values partial cumulative contribution percentage   variance. eigen.threshold threshold eigen value used. rotation matrix rotation values loadings. scores   matrix scores PCA, CA FAMD. variability.ret data frame   individuals/genotypes ordered variability retained. cores.info data frame core set size percentage variability   retained according method used.","code":""},{"path":"https://aravind-j.github.io/rpcss/reference/pcss.core.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Principal Component Scoring to Generate Core collections — pcss.core","text":"core collection constituted entire collection \\(N\\) genotypes using quantitative data \\(J\\) traits using Principal Component Scoring Strategy (PCSS) (Hamon Noirot 1990; Noirot et al. 1996; Noirot et al. 2003)  follows: Principal Component Analysis (PCA) performed standardized genotype \\(\\times\\) trait data. takes care multicollinearity traits generate \\(J\\) standardized independent variables factors principal component. Considering subset factors \\(K\\), Generalized Sum  Squares (GSS) N individuals K factorial spaces computed \\(N \\times K\\). \\(K\\) can number factors eigen value \\(\\lambda\\) greater threshold value 1 (Kaiser-Guttman criterion) average eigen values. contribution \\(\\)th genotype GSS (\\(P_{}\\)) total variability calculated . \\[P_{} = \\sum_{j = 1}^{K} x_{ij}^{2}\\] \\(x_{ij}\\) component score coordinate \\(\\)th genotype \\(j\\)th principal component. genotype, relative contribution GSS total variability computed . \\[CR_{} = \\frac{P_{}}{N \\times K}\\] genotypes sorted descending order magnitude contribution GSS cumulative contribution successive genotypes GSS computed. core collection can selected three different methods.  Selection fixed proportion percentage number top  accessions. Selection top accessions contribute fixed  percentage GSS. Fitting logistic regression model following form  cumulative contribution successive genotypes GSS  (Balakrishnan et al. 2000) . \\[\\frac{y}{-y} = e^{+ bn}\\] equation can  reparameterized . \\[\\log_{e} \\left ( {\\frac{y}{-y}} \\right ) = + bn\\] , \\(\\) \\(b\\) intercept regression  coefficient, respectively; \\(y\\) cumulative contribution  successive genotypes GSS; \\(n\\) rank genotype  sorted according contribution GSS \\(\\) asymptote  curve (\\(= 100\\)). rate increase successive contribution genotypes GSS can  computed following equation find point inflection  rate increase starts declining. \\(\\frac{\\mathrm{d} y}{\\mathrm{d} x} = (-y)\\) number accessions included till peak infection point  selected constitute core collection. Similarly qualitative traits, standardized independent variables factors can obtained Correspondence Analysis (CA) complete disjunctive table genotype \\(\\times\\) trait data specific Multiple Correspondence Analysis (MCA). rpcss, also extended data sets quantitative qualitative traits implementing Factor Analysis Mixed Data (FAMD) obtaining standardized independent variables factors. rpcss, PCA, MCA FAMD implemented via FactoMineR package. (Le et al. 2008; Husson et al. 2017) .","code":""},{"path":"https://aravind-j.github.io/rpcss/reference/pcss.core.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Principal Component Scoring to Generate Core collections — pcss.core","text":"Balakrishnan R, Nair NV, Sreenivasan TV (2000). “method establishing core collection Saccharum officinarum L. germplasm based quantitative-morphological data.” Genetic Resources Crop Evolution, 47, 1–9. ISBN: 0925-9864 Publisher: Springer. Hamon S, Noirot M (1990). “proposed procedures obtaining core collection using quantitative plant characterization data.” Report International Workshop Okra Genetic Resources held National Bureau Plant Genetic Resources (NBPGR), New Delhi, India, 8-12 October,1990,  number 5 International Crop Network Series. International Board Plant Genetic Resources, Rome. Husson F, Le S, Pages J (2017). Exploratory Multivariate Analysis Example Using R, Second edition edition. CRC Press, Boca Raton. ISBN 978-1-138-19634-6. Le S, Josse J, Husson F (2008). “FactoMineR : R package multivariate analysis.” Journal Statistical Software, 25(1). Noirot M, Anthony F, Dussert S, Hamon S (2003). “method building core collections.” Genetic Diversity Cultivated Tropical Plants, 81–92. CRC Press. Noirot M, Hamon S, Anthony F (1996). “principal component scoring: new method constituting core collection using quantitative data.” Genetic Resources Crop Evolution, 43(1), 1–6.","code":""},{"path":[]},{"path":"https://aravind-j.github.io/rpcss/reference/pcss.core.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Principal Component Scoring to Generate Core collections — pcss.core","text":"","code":"#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # Prepare example data #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  suppressPackageStartupMessages(library(EvaluateCore))  # Get data from EvaluateCore  data(\"cassava_EC\", package = \"EvaluateCore\") data = cbind(Genotypes = rownames(cassava_EC), cassava_EC) quant <- c(\"NMSR\", \"TTRN\", \"TFWSR\", \"TTRW\", \"TFWSS\", \"TTSW\", \"TTPW\", \"AVPW\",            \"ARSR\", \"SRDM\") qual <- c(\"CUAL\", \"LNGS\", \"PTLC\", \"DSTA\", \"LFRT\", \"LBTEF\", \"CBTR\", \"NMLB\",           \"ANGB\", \"CUAL9M\", \"LVC9M\", \"TNPR9M\", \"PL9M\", \"STRP\", \"STRC\",           \"PSTR\") rownames(data) <- NULL  # Convert qualitative data columns to factor data[, qual] <- lapply(data[, qual], as.factor)  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # Get core sets with PCSS (quantitative data) #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  out1 <- pcss.core(data = data, names = \"Genotypes\",                   quantitative = quant,                   qualitative = NULL, eigen.threshold = NULL, size = 0.2,                   var.threshold = 0.75)  out1 #>  #> Method #> ======================== #> [1] \"PCA\" #>  #> Details #> ======================== #>                                  Detail #> 1 Total number of individuals/genotypes #> 2                   Quantitative traits #> 3                    Qualitative traits #> 4                                Method #> 5                 Threshold eigen value #> 6       Number of eigen values selected #> 7                        Threshold size #> 8                Threshold variance (%) #>                                                          Value #> 1                                                         1684 #> 2 NMSR, TTRN, TFWSR, TTRW, TFWSS, TTSW, TTPW, AVPW, ARSR, SRDM #> 3                                                              #> 4                                                          PCA #> 5                                                            1 #> 6                                                            2 #> 7                                                          0.2 #> 8                                                           75 #>  #> Core sets #> ========================= #>                   Method Size   VarRet #> 1      By size specified  337 62.79839 #> 2  By threshold variance  532 75.00000 #> 3 By logistic regression  189 50.03205  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # Get core sets with PCSS (qualitative data) #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  out2 <- pcss.core(data = data, names = \"Genotypes\", quantitative = NULL,                   qualitative = qual, eigen.threshold = NULL,                   size = 0.2, var.threshold = 0.75)  out2 #>  #> Method #> ======================== #> [1] \"MCA\" #>  #> Details #> ======================== #>                                  Detail #> 1 Total number of individuals/genotypes #> 2                   Quantitative traits #> 3                    Qualitative traits #> 4                                Method #> 5                 Threshold eigen value #> 6       Number of eigen values selected #> 7                        Threshold size #> 8                Threshold variance (%) #>                                                                                                  Value #> 1                                                                                                 1684 #> 2                                                                                                      #> 3 CUAL, LNGS, PTLC, DSTA, LFRT, LBTEF, CBTR, NMLB, ANGB, CUAL9M, LVC9M, TNPR9M, PL9M, STRP, STRC, PSTR #> 4                                                                                                  MCA #> 5                                                                                               0.0625 #> 6                                                                                                   24 #> 7                                                                                                  0.2 #> 8                                                                                                   75 #>  #> Core sets #> ========================= #>                   Method Size   VarRet #> 1      By size specified  337 51.05444 #> 2  By threshold variance  822 75.00000 #> 3 By logistic regression  322 50.00157  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # Get core sets with PCSS (quantitative and qualitative data) #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  out3 <- pcss.core(data = data, names = \"Genotypes\",                   quantitative = quant,                   qualitative = qual, eigen.threshold = NULL)  out3 #>  #> Method #> ======================== #> [1] \"FAMD\" #>  #> Details #> ======================== #>                                  Detail #> 1 Total number of individuals/genotypes #> 2                   Quantitative traits #> 3                    Qualitative traits #> 4                                Method #> 5                 Threshold eigen value #> 6       Number of eigen values selected #> 7                        Threshold size #> 8                Threshold variance (%) #>                                                                                                  Value #> 1                                                                                                 1684 #> 2                                         NMSR, TTRN, TFWSR, TTRW, TFWSS, TTSW, TTPW, AVPW, ARSR, SRDM #> 3 CUAL, LNGS, PTLC, DSTA, LFRT, LBTEF, CBTR, NMLB, ANGB, CUAL9M, LVC9M, TNPR9M, PL9M, STRP, STRC, PSTR #> 4                                                                                                 FAMD #> 5                                                                                              1.63208 #> 6                                                                                                    6 #> 7                                                                                                  0.2 #> 8                                                                                                   75 #>  #> Core sets #> ========================= #>                   Method Size   VarRet #> 1      By size specified  337 44.63182 #> 2  By threshold variance  859 75.00000 #> 3 By logistic regression  412 50.02493"},{"path":"https://aravind-j.github.io/rpcss/reference/print.pcss.core.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints summary of pcss.core object — print.pcss.core","title":"Prints summary of pcss.core object — print.pcss.core","text":"pcss.core prints console summary object class pcss.core including dimensionality reduction method used, basic details including parameters information core sets can constituted.","code":""},{"path":"https://aravind-j.github.io/rpcss/reference/print.pcss.core.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints summary of pcss.core object — print.pcss.core","text":"","code":"# S3 method for class 'pcss.core' print(x, ...)"},{"path":"https://aravind-j.github.io/rpcss/reference/print.pcss.core.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints summary of pcss.core object — print.pcss.core","text":"x object class pcss.core. ... Unused.","code":""},{"path":"https://aravind-j.github.io/rpcss/reference/print.pcss.core.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prints summary of pcss.core object — print.pcss.core","text":"argument x, invisibly print   methods.","code":""},{"path":[]},{"path":"https://aravind-j.github.io/rpcss/reference/screeplot.pcss.core.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Eigen values as a Scree Plot from pcss.core Output — screeplot.pcss.core","title":"Plot Eigen values as a Scree Plot from pcss.core Output — screeplot.pcss.core","text":"screeplot.pcss.core generates scree plot eigen values output pcss.core.","code":""},{"path":"https://aravind-j.github.io/rpcss/reference/screeplot.pcss.core.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Eigen values as a Scree Plot from pcss.core Output — screeplot.pcss.core","text":"","code":"# S3 method for class 'pcss.core' screeplot(x, ndim = NULL, show.values = TRUE, ...)"},{"path":"https://aravind-j.github.io/rpcss/reference/screeplot.pcss.core.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Eigen values as a Scree Plot from pcss.core Output — screeplot.pcss.core","text":"x object class pcss.core. ndim number eigen values plotted scree plot. show.values TRUE, eigen values shown plot annotation labels. Default TRUE. ... Unused.","code":""},{"path":"https://aravind-j.github.io/rpcss/reference/screeplot.pcss.core.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Eigen values as a Scree Plot from pcss.core Output — screeplot.pcss.core","text":"scree plot ggplot object.","code":""},{"path":[]},{"path":"https://aravind-j.github.io/rpcss/reference/screeplot.pcss.core.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Eigen values as a Scree Plot from pcss.core Output — screeplot.pcss.core","text":"","code":"#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # Prepare example data #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  suppressPackageStartupMessages(library(EvaluateCore))  # Get data from EvaluateCore  data(\"cassava_EC\", package = \"EvaluateCore\") data = cbind(Genotypes = rownames(cassava_EC), cassava_EC) quant <- c(\"NMSR\", \"TTRN\", \"TFWSR\", \"TTRW\", \"TFWSS\", \"TTSW\", \"TTPW\", \"AVPW\",            \"ARSR\", \"SRDM\") qual <- c(\"CUAL\", \"LNGS\", \"PTLC\", \"DSTA\", \"LFRT\", \"LBTEF\", \"CBTR\", \"NMLB\",           \"ANGB\", \"CUAL9M\", \"LVC9M\", \"TNPR9M\", \"PL9M\", \"STRP\", \"STRC\",           \"PSTR\") rownames(data) <- NULL  # Convert qualitative data columns to factor data[, qual] <- lapply(data[, qual], as.factor)   library(FactoMineR) suppressPackageStartupMessages(library(factoextra))  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # With quantitative data #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  out1 <- pcss.core(data = data, names = \"Genotypes\",                   quantitative = quant,                   qualitative = NULL, eigen.threshold = NULL, size = 0.2,                   var.threshold = 0.75)  # Plot scree plot screeplot(x = out1)   # Plot biplot with factoextra fviz_screeplot(out1$raw.out)   #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # Get core sets with PCSS (qualitative data) #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  out2 <- pcss.core(data = data, names = \"Genotypes\", quantitative = NULL,                   qualitative = qual, eigen.threshold = NULL,                   size = 0.2, var.threshold = 0.75)  # Plot scree plot screeplot(x = out2)   # Plot biplot with factoextra fviz_screeplot(out2$raw.out)   #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # Get core sets with PCSS (quantitative and qualitative data) #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  out3 <- pcss.core(data = data, names = \"Genotypes\",                   quantitative = quant,                   qualitative = qual, eigen.threshold = NULL)  # Plot scree plot screeplot(x = out3)   # Plot biplot with factoextra fviz_screeplot(out3$raw.out)"},{"path":"https://aravind-j.github.io/rpcss/reference/subset.pcss.core.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch the names of individuals/genotypes in the core set generated from pcss.core Output — subset.pcss.core","title":"Fetch the names of individuals/genotypes in the core set generated from pcss.core Output — subset.pcss.core","text":"subset.pcss.core returns names individuals/genotypes core collection pcss.core Output.","code":""},{"path":"https://aravind-j.github.io/rpcss/reference/subset.pcss.core.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch the names of individuals/genotypes in the core set generated from pcss.core Output — subset.pcss.core","text":"","code":"# S3 method for class 'pcss.core' subset(x, criterion = c(\"size\", \"variance\", \"logistic\"), ...)"},{"path":"https://aravind-j.github.io/rpcss/reference/subset.pcss.core.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch the names of individuals/genotypes in the core set generated from pcss.core Output — subset.pcss.core","text":"x object class pcss.core. criterion core collection generation criterion. Either \"size\", \"variance\", \"logistic\". See Details. ... Unused.","code":""},{"path":"https://aravind-j.github.io/rpcss/reference/subset.pcss.core.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch the names of individuals/genotypes in the core set generated from pcss.core Output — subset.pcss.core","text":"names individuals/genotypes core collection   character vector.","code":""},{"path":"https://aravind-j.github.io/rpcss/reference/subset.pcss.core.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch the names of individuals/genotypes in the core set generated from pcss.core Output — subset.pcss.core","text":"Use \"size\" return names individuals/genotypes core collection according threshold size criterion use \"variance\" return names according variability threshold criterion use  \"logistic\" return names according inflection point rate progress cumulative variability retained identified logistic regression.","code":""},{"path":[]},{"path":"https://aravind-j.github.io/rpcss/reference/subset.pcss.core.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch the names of individuals/genotypes in the core set generated from pcss.core Output — subset.pcss.core","text":"","code":"#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # Prepare example data #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  suppressPackageStartupMessages(library(EvaluateCore))  # Get data from EvaluateCore  data(\"cassava_EC\", package = \"EvaluateCore\") data = cbind(Genotypes = rownames(cassava_EC), cassava_EC) quant <- c(\"NMSR\", \"TTRN\", \"TFWSR\", \"TTRW\", \"TFWSS\", \"TTSW\", \"TTPW\", \"AVPW\",            \"ARSR\", \"SRDM\") qual <- c(\"CUAL\", \"LNGS\", \"PTLC\", \"DSTA\", \"LFRT\", \"LBTEF\", \"CBTR\", \"NMLB\",           \"ANGB\", \"CUAL9M\", \"LVC9M\", \"TNPR9M\", \"PL9M\", \"STRP\", \"STRC\",           \"PSTR\") rownames(data) <- NULL  # Convert qualitative data columns to factor data[, qual] <- lapply(data[, qual], as.factor)  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # With quantitative data #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  out1 <- pcss.core(data = data, names = \"Genotypes\",                   quantitative = quant,                   qualitative = NULL, eigen.threshold = NULL, size = 0.2,                   var.threshold = 0.75)  # Core sets out1$cores.info #>                   Method Size   VarRet #> 1      By size specified  337 62.79839 #> 2  By threshold variance  532 75.00000 #> 3 By logistic regression  189 50.03205  # Fetch genotype names of core set by size criterion subset(x = out1, criterion = \"size\") #>   [1] \"TMe-3163\" \"TMe-603\"  \"TMe-3685\" \"TMe-3605\" \"TMe-3292\" \"TMe-399\"  #>   [7] \"TMe-3667\" \"TMe-3736\" \"TMe-3800\" \"TMe-3705\" \"TMe-616\"  \"TMe-2943\" #>  [13] \"TMe-3573\" \"TMe-901\"  \"TMe-3628\" \"TMe-390\"  \"TMe-1730\" \"TMe-3730\" #>  [19] \"TMe-2035\" \"TMe-3223\" \"TMe-2050\" \"TMe-2967\" \"TMe-812\"  \"TMe-608\"  #>  [25] \"TMe-2853\" \"TMe-2996\" \"TMe-3694\" \"TMe-3701\" \"TMe-2983\" \"TMe-731\"  #>  [31] \"TMe-2531\" \"TMe-707\"  \"TMe-412\"  \"TMe-717\"  \"TMe-761\"  \"TMe-1261\" #>  [37] \"TMe-3415\" \"TMe-2963\" \"TMe-997\"  \"TMe-588\"  \"TMe-373\"  \"TMe-13\"   #>  [43] \"TMe-798\"  \"TMe-1985\" \"TMe-861\"  \"TMe-3040\" \"TMe-2940\" \"TMe-1919\" #>  [49] \"TMe-3089\" \"TMe-3581\" \"TMe-659\"  \"TMe-2043\" \"TMe-3392\" \"TMe-432\"  #>  [55] \"TMe-3297\" \"TMe-705\"  \"TMe-623\"  \"TMe-929\"  \"TMe-1294\" \"TMe-1416\" #>  [61] \"TMe-2955\" \"TMe-832\"  \"TMe-1307\" \"TMe-1646\" \"TMe-3319\" \"TMe-815\"  #>  [67] \"TMe-427\"  \"TMe-3406\" \"TMe-3698\" \"TMe-728\"  \"TMe-2913\" \"TMe-421\"  #>  [73] \"TMe-1283\" \"TMe-3641\" \"TMe-2204\" \"TMe-584\"  \"TMe-2196\" \"TMe-527\"  #>  [79] \"TMe-1945\" \"TMe-863\"  \"TMe-3249\" \"TMe-3065\" \"TMe-27\"   \"TMe-694\"  #>  [85] \"TMe-725\"  \"TMe-1011\" \"TMe-2966\" \"TMe-926\"  \"TMe-1472\" \"TMe-3130\" #>  [91] \"TMe-3025\" \"TMe-3076\" \"TMe-2604\" \"TMe-700\"  \"TMe-1098\" \"TMe-994\"  #>  [97] \"TMe-1272\" \"TMe-2937\" \"TMe-2952\" \"TMe-2916\" \"TMe-3565\" \"TMe-3396\" #> [103] \"TMe-2329\" \"TMe-3659\" \"TMe-3601\" \"TMe-3281\" \"TMe-1158\" \"TMe-2040\" #> [109] \"TMe-835\"  \"TMe-1339\" \"TMe-3475\" \"TMe-742\"  \"TMe-2151\" \"TMe-2984\" #> [115] \"TMe-1958\" \"TMe-3034\" \"TMe-438\"  \"TMe-391\"  \"TMe-3485\" \"TMe-1137\" #> [121] \"TMe-1286\" \"TMe-1248\" \"TMe-3398\" \"TMe-1079\" \"TMe-3087\" \"TMe-2518\" #> [127] \"TMe-473\"  \"TMe-2914\" \"TMe-3639\" \"TMe-3363\" \"TMe-585\"  \"TMe-631\"  #> [133] \"TMe-1806\" \"TMe-3329\" \"TMe-2441\" \"TMe-1129\" \"TMe-2226\" \"TMe-729\"  #> [139] \"TMe-2905\" \"TMe-736\"  \"TMe-2906\" \"TMe-1300\" \"TMe-1723\" \"TMe-756\"  #> [145] \"TMe-787\"  \"TMe-3633\" \"TMe-1124\" \"TMe-1101\" \"TMe-1388\" \"TMe-2688\" #> [151] \"TMe-579\"  \"TMe-2802\" \"TMe-86\"   \"TMe-1526\" \"TMe-1311\" \"TMe-569\"  #> [157] \"TMe-3282\" \"TMe-609\"  \"TMe-645\"  \"TMe-2551\" \"TMe-3773\" \"TMe-2956\" #> [163] \"TMe-665\"  \"TMe-2439\" \"TMe-481\"  \"TMe-289\"  \"TMe-1975\" \"TMe-487\"  #> [169] \"TMe-3501\" \"TMe-2119\" \"TMe-826\"  \"TMe-362\"  \"TMe-410\"  \"TMe-3222\" #> [175] \"TMe-1762\" \"TMe-1756\" \"TMe-1425\" \"TMe-2968\" \"TMe-431\"  \"TMe-3531\" #> [181] \"TMe-2257\" \"TMe-1769\" \"TMe-2976\" \"TMe-404\"  \"TMe-618\"  \"TMe-154\"  #> [187] \"TMe-750\"  \"TMe-1988\" \"TMe-1007\" \"TMe-1621\" \"TMe-2862\" \"TMe-510\"  #> [193] \"TMe-2733\" \"TMe-35\"   \"TMe-1273\" \"TMe-394\"  \"TMe-3387\" \"TMe-601\"  #> [199] \"TMe-1376\" \"TMe-3401\" \"TMe-3382\" \"TMe-2843\" \"TMe-745\"  \"TMe-925\"  #> [205] \"TMe-751\"  \"TMe-3054\" \"TMe-1401\" \"TMe-2513\" \"TMe-47\"   \"TMe-3299\" #> [211] \"TMe-4\"    \"TMe-3596\" \"TMe-1074\" \"TMe-1042\" \"TMe-365\"  \"TMe-2860\" #> [217] \"TMe-550\"  \"TMe-1580\" \"TMe-589\"  \"TMe-148\"  \"TMe-2910\" \"TMe-1715\" #> [223] \"TMe-1501\" \"TMe-3351\" \"TMe-3353\" \"TMe-2757\" \"TMe-1817\" \"TMe-3471\" #> [229] \"TMe-209\"  \"TMe-1564\" \"TMe-2973\" \"TMe-298\"  \"TMe-6\"    \"TMe-2995\" #> [235] \"TMe-3467\" \"TMe-400\"  \"TMe-363\"  \"TMe-606\"  \"TMe-1786\" \"TMe-251\"  #> [241] \"TMe-3428\" \"TMe-93\"   \"TMe-248\"  \"TMe-737\"  \"TMe-3368\" \"TMe-3460\" #> [247] \"TMe-3435\" \"TMe-3352\" \"TMe-241\"  \"TMe-66\"   \"TMe-3599\" \"TMe-3572\" #> [253] \"TMe-3093\" \"TMe-3437\" \"TMe-1725\" \"TMe-1269\" \"TMe-1312\" \"TMe-3571\" #> [259] \"TMe-976\"  \"TMe-893\"  \"TMe-2530\" \"TMe-7\"    \"TMe-3110\" \"TMe-3074\" #> [265] \"TMe-3346\" \"TMe-85\"   \"TMe-1792\" \"TMe-836\"  \"TMe-3465\" \"TMe-2901\" #> [271] \"TMe-501\"  \"TMe-196\"  \"TMe-876\"  \"TMe-3066\" \"TMe-777\"  \"TMe-3592\" #> [277] \"TMe-3575\" \"TMe-2751\" \"TMe-886\"  \"TMe-475\"  \"TMe-23\"   \"TMe-3272\" #> [283] \"TMe-2811\" \"TMe-3557\" \"TMe-2057\" \"TMe-1100\" \"TMe-3679\" \"TMe-2821\" #> [289] \"TMe-3209\" \"TMe-174\"  \"TMe-360\"  \"TMe-1332\" \"TMe-2589\" \"TMe-1239\" #> [295] \"TMe-1033\" \"TMe-2374\" \"TMe-304\"  \"TMe-2128\" \"TMe-3724\" \"TMe-1560\" #> [301] \"TMe-312\"  \"TMe-3273\" \"TMe-3357\" \"TMe-3266\" \"TMe-3007\" \"TMe-208\"  #> [307] \"TMe-1558\" \"TMe-1964\" \"TMe-656\"  \"TMe-698\"  \"TMe-500\"  \"TMe-2897\" #> [313] \"TMe-64\"   \"TMe-2124\" \"TMe-3133\" \"TMe-2779\" \"TMe-1398\" \"TMe-699\"  #> [319] \"TMe-845\"  \"TMe-1444\" \"TMe-3085\" \"TMe-3210\" \"TMe-3220\" \"TMe-2790\" #> [325] \"TMe-716\"  \"TMe-3055\" \"TMe-2203\" \"TMe-526\"  \"TMe-2855\" \"TMe-78\"   #> [331] \"TMe-70\"   \"TMe-2242\" \"TMe-3752\" \"TMe-5\"    \"TMe-3539\" \"TMe-343\"  #> [337] \"TMe-1522\"  # Fetch genotype names of core set by variance criterion subset(x = out1, criterion = \"variance\") #>   [1] \"TMe-3163\" \"TMe-603\"  \"TMe-3685\" \"TMe-3605\" \"TMe-3292\" \"TMe-399\"  #>   [7] \"TMe-3667\" \"TMe-3736\" \"TMe-3800\" \"TMe-3705\" \"TMe-616\"  \"TMe-2943\" #>  [13] \"TMe-3573\" \"TMe-901\"  \"TMe-3628\" \"TMe-390\"  \"TMe-1730\" \"TMe-3730\" #>  [19] \"TMe-2035\" \"TMe-3223\" \"TMe-2050\" \"TMe-2967\" \"TMe-812\"  \"TMe-608\"  #>  [25] \"TMe-2853\" \"TMe-2996\" \"TMe-3694\" \"TMe-3701\" \"TMe-2983\" \"TMe-731\"  #>  [31] \"TMe-2531\" \"TMe-707\"  \"TMe-412\"  \"TMe-717\"  \"TMe-761\"  \"TMe-1261\" #>  [37] \"TMe-3415\" \"TMe-2963\" \"TMe-997\"  \"TMe-588\"  \"TMe-373\"  \"TMe-13\"   #>  [43] \"TMe-798\"  \"TMe-1985\" \"TMe-861\"  \"TMe-3040\" \"TMe-2940\" \"TMe-1919\" #>  [49] \"TMe-3089\" \"TMe-3581\" \"TMe-659\"  \"TMe-2043\" \"TMe-3392\" \"TMe-432\"  #>  [55] \"TMe-3297\" \"TMe-705\"  \"TMe-623\"  \"TMe-929\"  \"TMe-1294\" \"TMe-1416\" #>  [61] \"TMe-2955\" \"TMe-832\"  \"TMe-1307\" \"TMe-1646\" \"TMe-3319\" \"TMe-815\"  #>  [67] \"TMe-427\"  \"TMe-3406\" \"TMe-3698\" \"TMe-728\"  \"TMe-2913\" \"TMe-421\"  #>  [73] \"TMe-1283\" \"TMe-3641\" \"TMe-2204\" \"TMe-584\"  \"TMe-2196\" \"TMe-527\"  #>  [79] \"TMe-1945\" \"TMe-863\"  \"TMe-3249\" \"TMe-3065\" \"TMe-27\"   \"TMe-694\"  #>  [85] \"TMe-725\"  \"TMe-1011\" \"TMe-2966\" \"TMe-926\"  \"TMe-1472\" \"TMe-3130\" #>  [91] \"TMe-3025\" \"TMe-3076\" \"TMe-2604\" \"TMe-700\"  \"TMe-1098\" \"TMe-994\"  #>  [97] \"TMe-1272\" \"TMe-2937\" \"TMe-2952\" \"TMe-2916\" \"TMe-3565\" \"TMe-3396\" #> [103] \"TMe-2329\" \"TMe-3659\" \"TMe-3601\" \"TMe-3281\" \"TMe-1158\" \"TMe-2040\" #> [109] \"TMe-835\"  \"TMe-1339\" \"TMe-3475\" \"TMe-742\"  \"TMe-2151\" \"TMe-2984\" #> [115] \"TMe-1958\" \"TMe-3034\" \"TMe-438\"  \"TMe-391\"  \"TMe-3485\" \"TMe-1137\" #> [121] \"TMe-1286\" \"TMe-1248\" \"TMe-3398\" \"TMe-1079\" \"TMe-3087\" \"TMe-2518\" #> [127] \"TMe-473\"  \"TMe-2914\" \"TMe-3639\" \"TMe-3363\" \"TMe-585\"  \"TMe-631\"  #> [133] \"TMe-1806\" \"TMe-3329\" \"TMe-2441\" \"TMe-1129\" \"TMe-2226\" \"TMe-729\"  #> [139] \"TMe-2905\" \"TMe-736\"  \"TMe-2906\" \"TMe-1300\" \"TMe-1723\" \"TMe-756\"  #> [145] \"TMe-787\"  \"TMe-3633\" \"TMe-1124\" \"TMe-1101\" \"TMe-1388\" \"TMe-2688\" #> [151] \"TMe-579\"  \"TMe-2802\" \"TMe-86\"   \"TMe-1526\" \"TMe-1311\" \"TMe-569\"  #> [157] \"TMe-3282\" \"TMe-609\"  \"TMe-645\"  \"TMe-2551\" \"TMe-3773\" \"TMe-2956\" #> [163] \"TMe-665\"  \"TMe-2439\" \"TMe-481\"  \"TMe-289\"  \"TMe-1975\" \"TMe-487\"  #> [169] \"TMe-3501\" \"TMe-2119\" \"TMe-826\"  \"TMe-362\"  \"TMe-410\"  \"TMe-3222\" #> [175] \"TMe-1762\" \"TMe-1756\" \"TMe-1425\" \"TMe-2968\" \"TMe-431\"  \"TMe-3531\" #> [181] \"TMe-2257\" \"TMe-1769\" \"TMe-2976\" \"TMe-404\"  \"TMe-618\"  \"TMe-154\"  #> [187] \"TMe-750\"  \"TMe-1988\" \"TMe-1007\" \"TMe-1621\" \"TMe-2862\" \"TMe-510\"  #> [193] \"TMe-2733\" \"TMe-35\"   \"TMe-1273\" \"TMe-394\"  \"TMe-3387\" \"TMe-601\"  #> [199] \"TMe-1376\" \"TMe-3401\" \"TMe-3382\" \"TMe-2843\" \"TMe-745\"  \"TMe-925\"  #> [205] \"TMe-751\"  \"TMe-3054\" \"TMe-1401\" \"TMe-2513\" \"TMe-47\"   \"TMe-3299\" #> [211] \"TMe-4\"    \"TMe-3596\" \"TMe-1074\" \"TMe-1042\" \"TMe-365\"  \"TMe-2860\" #> [217] \"TMe-550\"  \"TMe-1580\" \"TMe-589\"  \"TMe-148\"  \"TMe-2910\" \"TMe-1715\" #> [223] \"TMe-1501\" \"TMe-3351\" \"TMe-3353\" \"TMe-2757\" \"TMe-1817\" \"TMe-3471\" #> [229] \"TMe-209\"  \"TMe-1564\" \"TMe-2973\" \"TMe-298\"  \"TMe-6\"    \"TMe-2995\" #> [235] \"TMe-3467\" \"TMe-400\"  \"TMe-363\"  \"TMe-606\"  \"TMe-1786\" \"TMe-251\"  #> [241] \"TMe-3428\" \"TMe-93\"   \"TMe-248\"  \"TMe-737\"  \"TMe-3368\" \"TMe-3460\" #> [247] \"TMe-3435\" \"TMe-3352\" \"TMe-241\"  \"TMe-66\"   \"TMe-3599\" \"TMe-3572\" #> [253] \"TMe-3093\" \"TMe-3437\" \"TMe-1725\" \"TMe-1269\" \"TMe-1312\" \"TMe-3571\" #> [259] \"TMe-976\"  \"TMe-893\"  \"TMe-2530\" \"TMe-7\"    \"TMe-3110\" \"TMe-3074\" #> [265] \"TMe-3346\" \"TMe-85\"   \"TMe-1792\" \"TMe-836\"  \"TMe-3465\" \"TMe-2901\" #> [271] \"TMe-501\"  \"TMe-196\"  \"TMe-876\"  \"TMe-3066\" \"TMe-777\"  \"TMe-3592\" #> [277] \"TMe-3575\" \"TMe-2751\" \"TMe-886\"  \"TMe-475\"  \"TMe-23\"   \"TMe-3272\" #> [283] \"TMe-2811\" \"TMe-3557\" \"TMe-2057\" \"TMe-1100\" \"TMe-3679\" \"TMe-2821\" #> [289] \"TMe-3209\" \"TMe-174\"  \"TMe-360\"  \"TMe-1332\" \"TMe-2589\" \"TMe-1239\" #> [295] \"TMe-1033\" \"TMe-2374\" \"TMe-304\"  \"TMe-2128\" \"TMe-3724\" \"TMe-1560\" #> [301] \"TMe-312\"  \"TMe-3273\" \"TMe-3357\" \"TMe-3266\" \"TMe-3007\" \"TMe-208\"  #> [307] \"TMe-1558\" \"TMe-1964\" \"TMe-656\"  \"TMe-698\"  \"TMe-500\"  \"TMe-2897\" #> [313] \"TMe-64\"   \"TMe-2124\" \"TMe-3133\" \"TMe-2779\" \"TMe-1398\" \"TMe-699\"  #> [319] \"TMe-845\"  \"TMe-1444\" \"TMe-3085\" \"TMe-3210\" \"TMe-3220\" \"TMe-2790\" #> [325] \"TMe-716\"  \"TMe-3055\" \"TMe-2203\" \"TMe-526\"  \"TMe-2855\" \"TMe-78\"   #> [331] \"TMe-70\"   \"TMe-2242\" \"TMe-3752\" \"TMe-5\"    \"TMe-3539\" \"TMe-343\"  #> [337] \"TMe-1522\" \"TMe-1199\" \"TMe-277\"  \"TMe-3326\" \"TMe-3707\" \"TMe-333\"  #> [343] \"TMe-2814\" \"TMe-2567\" \"TMe-1830\" \"TMe-3433\" \"TMe-1198\" \"TMe-283\"  #> [349] \"TMe-1553\" \"TMe-1091\" \"TMe-361\"  \"TMe-930\"  \"TMe-218\"  \"TMe-3296\" #> [355] \"TMe-184\"  \"TMe-952\"  \"TMe-3548\" \"TMe-3533\" \"TMe-3140\" \"TMe-3207\" #> [361] \"TMe-1532\" \"TMe-830\"  \"TMe-1616\" \"TMe-1533\" \"TMe-3479\" \"TMe-1397\" #> [367] \"TMe-1006\" \"TMe-2010\" \"TMe-3766\" \"TMe-3101\" \"TMe-1257\" \"TMe-635\"  #> [373] \"TMe-1160\" \"TMe-1442\" \"TMe-2998\" \"TMe-44\"   \"TMe-1814\" \"TMe-2413\" #> [379] \"TMe-138\"  \"TMe-2425\" \"TMe-2271\" \"TMe-3234\" \"TMe-279\"  \"TMe-3480\" #> [385] \"TMe-477\"  \"TMe-423\"  \"TMe-1694\" \"TMe-359\"  \"TMe-3478\" \"TMe-1256\" #> [391] \"TMe-3127\" \"TMe-415\"  \"TMe-3443\" \"TMe-1366\" \"TMe-1886\" \"TMe-203\"  #> [397] \"TMe-1551\" \"TMe-1341\" \"TMe-3466\" \"TMe-1577\" \"TMe-1891\" \"TMe-2891\" #> [403] \"TMe-1796\" \"TMe-3455\" \"TMe-1067\" \"TMe-727\"  \"TMe-1847\" \"TMe-2809\" #> [409] \"TMe-2915\" \"TMe-247\"  \"TMe-1267\" \"TMe-600\"  \"TMe-2568\" \"TMe-340\"  #> [415] \"TMe-2917\" \"TMe-3721\" \"TMe-74\"   \"TMe-3362\" \"TMe-383\"  \"TMe-3185\" #> [421] \"TMe-1078\" \"TMe-1765\" \"TMe-2361\" \"TMe-2981\" \"TMe-176\"  \"TMe-3115\" #> [427] \"TMe-1250\" \"TMe-706\"  \"TMe-123\"  \"TMe-294\"  \"TMe-3071\" \"TMe-1505\" #> [433] \"TMe-3366\" \"TMe-2890\" \"TMe-575\"  \"TMe-3551\" \"TMe-2191\" \"TMe-3518\" #> [439] \"TMe-841\"  \"TMe-1568\" \"TMe-2304\" \"TMe-528\"  \"TMe-425\"  \"TMe-2753\" #> [445] \"TMe-594\"  \"TMe-1293\" \"TMe-3230\" \"TMe-267\"  \"TMe-210\"  \"TMe-3642\" #> [451] \"TMe-1547\" \"TMe-1348\" \"TMe-1512\" \"TMe-2195\" \"TMe-469\"  \"TMe-889\"  #> [457] \"TMe-3545\" \"TMe-3030\" \"TMe-1204\" \"TMe-67\"   \"TMe-1107\" \"TMe-3434\" #> [463] \"TMe-2355\" \"TMe-1579\" \"TMe-59\"   \"TMe-3252\" \"TMe-795\"  \"TMe-3591\" #> [469] \"TMe-1485\" \"TMe-2158\" \"TMe-2060\" \"TMe-2776\" \"TMe-3772\" \"TMe-1480\" #> [475] \"TMe-3558\" \"TMe-428\"  \"TMe-3169\" \"TMe-675\"  \"TMe-2307\" \"TMe-842\"  #> [481] \"TMe-3663\" \"TMe-2797\" \"TMe-3043\" \"TMe-2765\" \"TMe-3200\" \"TMe-3004\" #> [487] \"TMe-276\"  \"TMe-2056\" \"TMe-794\"  \"TMe-3514\" \"TMe-2970\" \"TMe-1184\" #> [493] \"TMe-1053\" \"TMe-3354\" \"TMe-634\"  \"TMe-1483\" \"TMe-237\"  \"TMe-3324\" #> [499] \"TMe-1581\" \"TMe-2510\" \"TMe-2944\" \"TMe-170\"  \"TMe-1622\" \"TMe-2356\" #> [505] \"TMe-3216\" \"TMe-306\"  \"TMe-259\"  \"TMe-875\"  \"TMe-3440\" \"TMe-1094\" #> [511] \"TMe-3438\" \"TMe-34\"   \"TMe-801\"  \"TMe-1716\" \"TMe-651\"  \"TMe-1406\" #> [517] \"TMe-274\"  \"TMe-1421\" \"TMe-3218\" \"TMe-1342\" \"TMe-1420\" \"TMe-1732\" #> [523] \"TMe-2748\" \"TMe-2839\" \"TMe-160\"  \"TMe-1790\" \"TMe-513\"  \"TMe-30\"   #> [529] \"TMe-2824\" \"TMe-2997\" \"TMe-1518\" \"TMe-2572\"  # Fetch genotype names of core set by logistic regression criterion subset(x = out1, criterion = \"logistic\") #>   [1] \"TMe-3163\" \"TMe-603\"  \"TMe-3685\" \"TMe-3605\" \"TMe-3292\" \"TMe-399\"  #>   [7] \"TMe-3667\" \"TMe-3736\" \"TMe-3800\" \"TMe-3705\" \"TMe-616\"  \"TMe-2943\" #>  [13] \"TMe-3573\" \"TMe-901\"  \"TMe-3628\" \"TMe-390\"  \"TMe-1730\" \"TMe-3730\" #>  [19] \"TMe-2035\" \"TMe-3223\" \"TMe-2050\" \"TMe-2967\" \"TMe-812\"  \"TMe-608\"  #>  [25] \"TMe-2853\" \"TMe-2996\" \"TMe-3694\" \"TMe-3701\" \"TMe-2983\" \"TMe-731\"  #>  [31] \"TMe-2531\" \"TMe-707\"  \"TMe-412\"  \"TMe-717\"  \"TMe-761\"  \"TMe-1261\" #>  [37] \"TMe-3415\" \"TMe-2963\" \"TMe-997\"  \"TMe-588\"  \"TMe-373\"  \"TMe-13\"   #>  [43] \"TMe-798\"  \"TMe-1985\" \"TMe-861\"  \"TMe-3040\" \"TMe-2940\" \"TMe-1919\" #>  [49] \"TMe-3089\" \"TMe-3581\" \"TMe-659\"  \"TMe-2043\" \"TMe-3392\" \"TMe-432\"  #>  [55] \"TMe-3297\" \"TMe-705\"  \"TMe-623\"  \"TMe-929\"  \"TMe-1294\" \"TMe-1416\" #>  [61] \"TMe-2955\" \"TMe-832\"  \"TMe-1307\" \"TMe-1646\" \"TMe-3319\" \"TMe-815\"  #>  [67] \"TMe-427\"  \"TMe-3406\" \"TMe-3698\" \"TMe-728\"  \"TMe-2913\" \"TMe-421\"  #>  [73] \"TMe-1283\" \"TMe-3641\" \"TMe-2204\" \"TMe-584\"  \"TMe-2196\" \"TMe-527\"  #>  [79] \"TMe-1945\" \"TMe-863\"  \"TMe-3249\" \"TMe-3065\" \"TMe-27\"   \"TMe-694\"  #>  [85] \"TMe-725\"  \"TMe-1011\" \"TMe-2966\" \"TMe-926\"  \"TMe-1472\" \"TMe-3130\" #>  [91] \"TMe-3025\" \"TMe-3076\" \"TMe-2604\" \"TMe-700\"  \"TMe-1098\" \"TMe-994\"  #>  [97] \"TMe-1272\" \"TMe-2937\" \"TMe-2952\" \"TMe-2916\" \"TMe-3565\" \"TMe-3396\" #> [103] \"TMe-2329\" \"TMe-3659\" \"TMe-3601\" \"TMe-3281\" \"TMe-1158\" \"TMe-2040\" #> [109] \"TMe-835\"  \"TMe-1339\" \"TMe-3475\" \"TMe-742\"  \"TMe-2151\" \"TMe-2984\" #> [115] \"TMe-1958\" \"TMe-3034\" \"TMe-438\"  \"TMe-391\"  \"TMe-3485\" \"TMe-1137\" #> [121] \"TMe-1286\" \"TMe-1248\" \"TMe-3398\" \"TMe-1079\" \"TMe-3087\" \"TMe-2518\" #> [127] \"TMe-473\"  \"TMe-2914\" \"TMe-3639\" \"TMe-3363\" \"TMe-585\"  \"TMe-631\"  #> [133] \"TMe-1806\" \"TMe-3329\" \"TMe-2441\" \"TMe-1129\" \"TMe-2226\" \"TMe-729\"  #> [139] \"TMe-2905\" \"TMe-736\"  \"TMe-2906\" \"TMe-1300\" \"TMe-1723\" \"TMe-756\"  #> [145] \"TMe-787\"  \"TMe-3633\" \"TMe-1124\" \"TMe-1101\" \"TMe-1388\" \"TMe-2688\" #> [151] \"TMe-579\"  \"TMe-2802\" \"TMe-86\"   \"TMe-1526\" \"TMe-1311\" \"TMe-569\"  #> [157] \"TMe-3282\" \"TMe-609\"  \"TMe-645\"  \"TMe-2551\" \"TMe-3773\" \"TMe-2956\" #> [163] \"TMe-665\"  \"TMe-2439\" \"TMe-481\"  \"TMe-289\"  \"TMe-1975\" \"TMe-487\"  #> [169] \"TMe-3501\" \"TMe-2119\" \"TMe-826\"  \"TMe-362\"  \"TMe-410\"  \"TMe-3222\" #> [175] \"TMe-1762\" \"TMe-1756\" \"TMe-1425\" \"TMe-2968\" \"TMe-431\"  \"TMe-3531\" #> [181] \"TMe-2257\" \"TMe-1769\" \"TMe-2976\" \"TMe-404\"  \"TMe-618\"  \"TMe-154\"  #> [187] \"TMe-750\"  \"TMe-1988\" \"TMe-1007\"  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # Get core sets with PCSS (qualitative data) #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  out2 <- pcss.core(data = data, names = \"Genotypes\", quantitative = NULL,                   qualitative = qual, eigen.threshold = NULL,                   size = 0.2, var.threshold = 0.75)  # Core sets out2$cores.info #>                   Method Size   VarRet #> 1      By size specified  337 51.05444 #> 2  By threshold variance  822 75.00000 #> 3 By logistic regression  322 50.00157  # Fetch genotype names of core set by size criterion subset(x = out2, criterion = \"size\") #>   [1] \"TMe-1004\" \"TMe-2953\" \"TMe-2010\" \"TMe-1020\" \"TMe-1511\" \"TMe-1174\" #>   [7] \"TMe-35\"   \"TMe-1461\" \"TMe-3054\" \"TMe-963\"  \"TMe-2567\" \"TMe-867\"  #>  [13] \"TMe-3222\" \"TMe-3428\" \"TMe-5\"    \"TMe-2304\" \"TMe-937\"  \"TMe-1875\" #>  [19] \"TMe-2985\" \"TMe-696\"  \"TMe-1124\" \"TMe-3396\" \"TMe-2853\" \"TMe-606\"  #>  [25] \"TMe-2033\" \"TMe-3255\" \"TMe-1232\" \"TMe-2996\" \"TMe-3112\" \"TMe-3026\" #>  [31] \"TMe-1796\" \"TMe-41\"   \"TMe-2355\" \"TMe-3095\" \"TMe-3736\" \"TMe-1025\" #>  [37] \"TMe-3252\" \"TMe-2993\" \"TMe-2967\" \"TMe-3282\" \"TMe-1769\" \"TMe-289\"  #>  [43] \"TMe-3281\" \"TMe-3466\" \"TMe-241\"  \"TMe-3266\" \"TMe-3330\" \"TMe-3264\" #>  [49] \"TMe-3249\" \"TMe-3262\" \"TMe-3493\" \"TMe-1042\" \"TMe-3690\" \"TMe-514\"  #>  [55] \"TMe-856\"  \"TMe-2064\" \"TMe-2809\" \"TMe-3475\" \"TMe-1661\" \"TMe-1995\" #>  [61] \"TMe-3272\" \"TMe-465\"  \"TMe-3319\" \"TMe-2534\" \"TMe-3549\" \"TMe-1053\" #>  [67] \"TMe-3323\" \"TMe-2980\" \"TMe-2069\" \"TMe-2604\" \"TMe-2981\" \"TMe-3140\" #>  [73] \"TMe-3223\" \"TMe-1633\" \"TMe-969\"  \"TMe-3116\" \"TMe-457\"  \"TMe-3389\" #>  [79] \"TMe-2083\" \"TMe-225\"  \"TMe-160\"  \"TMe-2413\" \"TMe-1403\" \"TMe-751\"  #>  [85] \"TMe-3141\" \"TMe-2906\" \"TMe-2971\" \"TMe-1416\" \"TMe-2439\" \"TMe-2890\" #>  [91] \"TMe-3030\" \"TMe-1164\" \"TMe-698\"  \"TMe-3398\" \"TMe-3387\" \"TMe-551\"  #>  [97] \"TMe-1428\" \"TMe-1392\" \"TMe-267\"  \"TMe-1988\" \"TMe-3065\" \"TMe-3392\" #> [103] \"TMe-3730\" \"TMe-3115\" \"TMe-1026\" \"TMe-3766\" \"TMe-3185\" \"TMe-185\"  #> [109] \"TMe-756\"  \"TMe-2172\" \"TMe-1814\" \"TMe-154\"  \"TMe-1564\" \"TMe-761\"  #> [115] \"TMe-3394\" \"TMe-2352\" \"TMe-956\"  \"TMe-3046\" \"TMe-1985\" \"TMe-540\"  #> [121] \"TMe-985\"  \"TMe-656\"  \"TMe-3771\" \"TMe-1723\" \"TMe-2785\" \"TMe-1158\" #> [127] \"TMe-1992\" \"TMe-1074\" \"TMe-266\"  \"TMe-2308\" \"TMe-138\"  \"TMe-2957\" #> [133] \"TMe-2195\" \"TMe-1579\" \"TMe-2004\" \"TMe-1518\" \"TMe-3253\" \"TMe-1608\" #> [139] \"TMe-2196\" \"TMe-936\"  \"TMe-480\"  \"TMe-1600\" \"TMe-1506\" \"TMe-2018\" #> [145] \"TMe-1266\" \"TMe-650\"  \"TMe-1239\" \"TMe-3088\" \"TMe-3111\" \"TMe-2045\" #> [151] \"TMe-3299\" \"TMe-1383\" \"TMe-3422\" \"TMe-44\"   \"TMe-2756\" \"TMe-3200\" #> [157] \"TMe-3663\" \"TMe-3478\" \"TMe-3437\" \"TMe-3605\" \"TMe-2907\" \"TMe-3445\" #> [163] \"TMe-1775\" \"TMe-1809\" \"TMe-1902\" \"TMe-3596\" \"TMe-3055\" \"TMe-3225\" #> [169] \"TMe-3805\" \"TMe-620\"  \"TMe-38\"   \"TMe-2031\" \"TMe-2913\" \"TMe-2914\" #> [175] \"TMe-2510\" \"TMe-2975\" \"TMe-1960\" \"TMe-3760\" \"TMe-3276\" \"TMe-2551\" #> [181] \"TMe-1425\" \"TMe-2916\" \"TMe-3314\" \"TMe-43\"   \"TMe-3277\" \"TMe-25\"   #> [187] \"TMe-2934\" \"TMe-3401\" \"TMe-1744\" \"TMe-3568\" \"TMe-2901\" \"TMe-3544\" #> [193] \"TMe-754\"  \"TMe-3143\" \"TMe-2810\" \"TMe-3274\" \"TMe-3485\" \"TMe-2955\" #> [199] \"TMe-536\"  \"TMe-3128\" \"TMe-3345\" \"TMe-3594\" \"TMe-378\"  \"TMe-3383\" #> [205] \"TMe-712\"  \"TMe-2041\" \"TMe-2912\" \"TMe-3628\" \"TMe-2217\" \"TMe-3707\" #> [211] \"TMe-2216\" \"TMe-2965\" \"TMe-1283\" \"TMe-3715\" \"TMe-3631\" \"TMe-3721\" #> [217] \"TMe-215\"  \"TMe-1226\" \"TMe-3480\" \"TMe-397\"  \"TMe-181\"  \"TMe-420\"  #> [223] \"TMe-280\"  \"TMe-1734\" \"TMe-619\"  \"TMe-3572\" \"TMe-3547\" \"TMe-3719\" #> [229] \"TMe-1479\" \"TMe-3397\" \"TMe-2860\" \"TMe-34\"   \"TMe-3234\" \"TMe-1218\" #> [235] \"TMe-3458\" \"TMe-3051\" \"TMe-778\"  \"TMe-1241\" \"TMe-352\"  \"TMe-1360\" #> [241] \"TMe-737\"  \"TMe-3638\" \"TMe-276\"  \"TMe-434\"  \"TMe-132\"  \"TMe-3167\" #> [247] \"TMe-509\"  \"TMe-3275\" \"TMe-774\"  \"TMe-1250\" \"TMe-3599\" \"TMe-2897\" #> [253] \"TMe-226\"  \"TMe-1700\" \"TMe-3576\" \"TMe-259\"  \"TMe-812\"  \"TMe-3312\" #> [259] \"TMe-1935\" \"TMe-74\"   \"TMe-15\"   \"TMe-190\"  \"TMe-3359\" \"TMe-3625\" #> [265] \"TMe-39\"   \"TMe-1301\" \"TMe-2791\" \"TMe-3238\" \"TMe-1566\" \"TMe-3619\" #> [271] \"TMe-2572\" \"TMe-1353\" \"TMe-2811\" \"TMe-1162\" \"TMe-3027\" \"TMe-3440\" #> [277] \"TMe-1434\" \"TMe-3481\" \"TMe-3198\" \"TMe-663\"  \"TMe-2979\" \"TMe-2237\" #> [283] \"TMe-270\"  \"TMe-3256\" \"TMe-853\"  \"TMe-1738\" \"TMe-362\"  \"TMe-3758\" #> [289] \"TMe-1401\" \"TMe-3278\" \"TMe-1916\" \"TMe-234\"  \"TMe-261\"  \"TMe-950\"  #> [295] \"TMe-635\"  \"TMe-184\"  \"TMe-277\"  \"TMe-107\"  \"TMe-28\"   \"TMe-1883\" #> [301] \"TMe-268\"  \"TMe-279\"  \"TMe-27\"   \"TMe-1099\" \"TMe-2688\" \"TMe-2779\" #> [307] \"TMe-3545\" \"TMe-2058\" \"TMe-1897\" \"TMe-116\"  \"TMe-1265\" \"TMe-40\"   #> [313] \"TMe-2866\" \"TMe-186\"  \"TMe-130\"  \"TMe-773\"  \"TMe-72\"   \"TMe-3418\" #> [319] \"TMe-725\"  \"TMe-123\"  \"TMe-2835\" \"TMe-3325\" \"TMe-3575\" \"TMe-3017\" #> [325] \"TMe-878\"  \"TMe-1302\" \"TMe-167\"  \"TMe-3273\" \"TMe-372\"  \"TMe-2374\" #> [331] \"TMe-759\"  \"TMe-103\"  \"TMe-205\"  \"TMe-82\"   \"TMe-442\"  \"TMe-745\"  #> [337] \"TMe-330\"   # Fetch genotype names of core set by variance criterion subset(x = out2, criterion = \"variance\") #>   [1] \"TMe-1004\" \"TMe-2953\" \"TMe-2010\" \"TMe-1020\" \"TMe-1511\" \"TMe-1174\" #>   [7] \"TMe-35\"   \"TMe-1461\" \"TMe-3054\" \"TMe-963\"  \"TMe-2567\" \"TMe-867\"  #>  [13] \"TMe-3222\" \"TMe-3428\" \"TMe-5\"    \"TMe-2304\" \"TMe-937\"  \"TMe-1875\" #>  [19] \"TMe-2985\" \"TMe-696\"  \"TMe-1124\" \"TMe-3396\" \"TMe-2853\" \"TMe-606\"  #>  [25] \"TMe-2033\" \"TMe-3255\" \"TMe-1232\" \"TMe-2996\" \"TMe-3112\" \"TMe-3026\" #>  [31] \"TMe-1796\" \"TMe-41\"   \"TMe-2355\" \"TMe-3095\" \"TMe-3736\" \"TMe-1025\" #>  [37] \"TMe-3252\" \"TMe-2993\" \"TMe-2967\" \"TMe-3282\" \"TMe-1769\" \"TMe-289\"  #>  [43] \"TMe-3281\" \"TMe-3466\" \"TMe-241\"  \"TMe-3266\" \"TMe-3330\" \"TMe-3264\" #>  [49] \"TMe-3249\" \"TMe-3262\" \"TMe-3493\" \"TMe-1042\" \"TMe-3690\" \"TMe-514\"  #>  [55] \"TMe-856\"  \"TMe-2064\" \"TMe-2809\" \"TMe-3475\" \"TMe-1661\" \"TMe-1995\" #>  [61] \"TMe-3272\" \"TMe-465\"  \"TMe-3319\" \"TMe-2534\" \"TMe-3549\" \"TMe-1053\" #>  [67] \"TMe-3323\" \"TMe-2980\" \"TMe-2069\" \"TMe-2604\" \"TMe-2981\" \"TMe-3140\" #>  [73] \"TMe-3223\" \"TMe-1633\" \"TMe-969\"  \"TMe-3116\" \"TMe-457\"  \"TMe-3389\" #>  [79] \"TMe-2083\" \"TMe-225\"  \"TMe-160\"  \"TMe-2413\" \"TMe-1403\" \"TMe-751\"  #>  [85] \"TMe-3141\" \"TMe-2906\" \"TMe-2971\" \"TMe-1416\" \"TMe-2439\" \"TMe-2890\" #>  [91] \"TMe-3030\" \"TMe-1164\" \"TMe-698\"  \"TMe-3398\" \"TMe-3387\" \"TMe-551\"  #>  [97] \"TMe-1428\" \"TMe-1392\" \"TMe-267\"  \"TMe-1988\" \"TMe-3065\" \"TMe-3392\" #> [103] \"TMe-3730\" \"TMe-3115\" \"TMe-1026\" \"TMe-3766\" \"TMe-3185\" \"TMe-185\"  #> [109] \"TMe-756\"  \"TMe-2172\" \"TMe-1814\" \"TMe-154\"  \"TMe-1564\" \"TMe-761\"  #> [115] \"TMe-3394\" \"TMe-2352\" \"TMe-956\"  \"TMe-3046\" \"TMe-1985\" \"TMe-540\"  #> [121] \"TMe-985\"  \"TMe-656\"  \"TMe-3771\" \"TMe-1723\" \"TMe-2785\" \"TMe-1158\" #> [127] \"TMe-1992\" \"TMe-1074\" \"TMe-266\"  \"TMe-2308\" \"TMe-138\"  \"TMe-2957\" #> [133] \"TMe-2195\" \"TMe-1579\" \"TMe-2004\" \"TMe-1518\" \"TMe-3253\" \"TMe-1608\" #> [139] \"TMe-2196\" \"TMe-936\"  \"TMe-480\"  \"TMe-1600\" \"TMe-1506\" \"TMe-2018\" #> [145] \"TMe-1266\" \"TMe-650\"  \"TMe-1239\" \"TMe-3088\" \"TMe-3111\" \"TMe-2045\" #> [151] \"TMe-3299\" \"TMe-1383\" \"TMe-3422\" \"TMe-44\"   \"TMe-2756\" \"TMe-3200\" #> [157] \"TMe-3663\" \"TMe-3478\" \"TMe-3437\" \"TMe-3605\" \"TMe-2907\" \"TMe-3445\" #> [163] \"TMe-1775\" \"TMe-1809\" \"TMe-1902\" \"TMe-3596\" \"TMe-3055\" \"TMe-3225\" #> [169] \"TMe-3805\" \"TMe-620\"  \"TMe-38\"   \"TMe-2031\" \"TMe-2913\" \"TMe-2914\" #> [175] \"TMe-2510\" \"TMe-2975\" \"TMe-1960\" \"TMe-3760\" \"TMe-3276\" \"TMe-2551\" #> [181] \"TMe-1425\" \"TMe-2916\" \"TMe-3314\" \"TMe-43\"   \"TMe-3277\" \"TMe-25\"   #> [187] \"TMe-2934\" \"TMe-3401\" \"TMe-1744\" \"TMe-3568\" \"TMe-2901\" \"TMe-3544\" #> [193] \"TMe-754\"  \"TMe-3143\" \"TMe-2810\" \"TMe-3274\" \"TMe-3485\" \"TMe-2955\" #> [199] \"TMe-536\"  \"TMe-3128\" \"TMe-3345\" \"TMe-3594\" \"TMe-378\"  \"TMe-3383\" #> [205] \"TMe-712\"  \"TMe-2041\" \"TMe-2912\" \"TMe-3628\" \"TMe-2217\" \"TMe-3707\" #> [211] \"TMe-2216\" \"TMe-2965\" \"TMe-1283\" \"TMe-3715\" \"TMe-3631\" \"TMe-3721\" #> [217] \"TMe-215\"  \"TMe-1226\" \"TMe-3480\" \"TMe-397\"  \"TMe-181\"  \"TMe-420\"  #> [223] \"TMe-280\"  \"TMe-1734\" \"TMe-619\"  \"TMe-3572\" \"TMe-3547\" \"TMe-3719\" #> [229] \"TMe-1479\" \"TMe-3397\" \"TMe-2860\" \"TMe-34\"   \"TMe-3234\" \"TMe-1218\" #> [235] \"TMe-3458\" \"TMe-3051\" \"TMe-778\"  \"TMe-1241\" \"TMe-352\"  \"TMe-1360\" #> [241] \"TMe-737\"  \"TMe-3638\" \"TMe-276\"  \"TMe-434\"  \"TMe-132\"  \"TMe-3167\" #> [247] \"TMe-509\"  \"TMe-3275\" \"TMe-774\"  \"TMe-1250\" \"TMe-3599\" \"TMe-2897\" #> [253] \"TMe-226\"  \"TMe-1700\" \"TMe-3576\" \"TMe-259\"  \"TMe-812\"  \"TMe-3312\" #> [259] \"TMe-1935\" \"TMe-74\"   \"TMe-15\"   \"TMe-190\"  \"TMe-3359\" \"TMe-3625\" #> [265] \"TMe-39\"   \"TMe-1301\" \"TMe-2791\" \"TMe-3238\" \"TMe-1566\" \"TMe-3619\" #> [271] \"TMe-2572\" \"TMe-1353\" \"TMe-2811\" \"TMe-1162\" \"TMe-3027\" \"TMe-3440\" #> [277] \"TMe-1434\" \"TMe-3481\" \"TMe-3198\" \"TMe-663\"  \"TMe-2979\" \"TMe-2237\" #> [283] \"TMe-270\"  \"TMe-3256\" \"TMe-853\"  \"TMe-1738\" \"TMe-362\"  \"TMe-3758\" #> [289] \"TMe-1401\" \"TMe-3278\" \"TMe-1916\" \"TMe-234\"  \"TMe-261\"  \"TMe-950\"  #> [295] \"TMe-635\"  \"TMe-184\"  \"TMe-277\"  \"TMe-107\"  \"TMe-28\"   \"TMe-1883\" #> [301] \"TMe-268\"  \"TMe-279\"  \"TMe-27\"   \"TMe-1099\" \"TMe-2688\" \"TMe-2779\" #> [307] \"TMe-3545\" \"TMe-2058\" \"TMe-1897\" \"TMe-116\"  \"TMe-1265\" \"TMe-40\"   #> [313] \"TMe-2866\" \"TMe-186\"  \"TMe-130\"  \"TMe-773\"  \"TMe-72\"   \"TMe-3418\" #> [319] \"TMe-725\"  \"TMe-123\"  \"TMe-2835\" \"TMe-3325\" \"TMe-3575\" \"TMe-3017\" #> [325] \"TMe-878\"  \"TMe-1302\" \"TMe-167\"  \"TMe-3273\" \"TMe-372\"  \"TMe-2374\" #> [331] \"TMe-759\"  \"TMe-103\"  \"TMe-205\"  \"TMe-82\"   \"TMe-442\"  \"TMe-745\"  #> [337] \"TMe-330\"  \"TMe-3332\" \"TMe-2383\" \"TMe-3804\" \"TMe-768\"  \"TMe-755\"  #> [343] \"TMe-381\"  \"TMe-3204\" \"TMe-3032\" \"TMe-2531\" \"TMe-1915\" \"TMe-460\"  #> [349] \"TMe-1299\" \"TMe-3034\" \"TMe-3463\" \"TMe-2769\" \"TMe-3542\" \"TMe-3729\" #> [355] \"TMe-1220\" \"TMe-815\"  \"TMe-3641\" \"TMe-3685\" \"TMe-3498\" \"TMe-1083\" #> [361] \"TMe-2988\" \"TMe-3292\" \"TMe-771\"  \"TMe-1904\" \"TMe-575\"  \"TMe-208\"  #> [367] \"TMe-3535\" \"TMe-63\"   \"TMe-425\"  \"TMe-2530\" \"TMe-1919\" \"TMe-85\"   #> [373] \"TMe-427\"  \"TMe-3433\" \"TMe-3727\" \"TMe-1964\" \"TMe-86\"   \"TMe-693\"  #> [379] \"TMe-3701\" \"TMe-2462\" \"TMe-2398\" \"TMe-748\"  \"TMe-1539\" \"TMe-2025\" #> [385] \"TMe-1651\" \"TMe-2\"    \"TMe-1359\" \"TMe-3053\" \"TMe-3337\" \"TMe-766\"  #> [391] \"TMe-209\"  \"TMe-33\"   \"TMe-2121\" \"TMe-948\"  \"TMe-1009\" \"TMe-1423\" #> [397] \"TMe-3726\" \"TMe-945\"  \"TMe-217\"  \"TMe-3705\" \"TMe-3114\" \"TMe-1305\" #> [403] \"TMe-18\"   \"TMe-3356\" \"TMe-798\"  \"TMe-2131\" \"TMe-3211\" \"TMe-1534\" #> [409] \"TMe-3002\" \"TMe-1419\" \"TMe-70\"   \"TMe-2027\" \"TMe-747\"  \"TMe-2296\" #> [415] \"TMe-4\"    \"TMe-334\"  \"TMe-3452\" \"TMe-3467\" \"TMe-2903\" \"TMe-3558\" #> [421] \"TMe-2532\" \"TMe-2077\" \"TMe-822\"  \"TMe-1420\" \"TMe-1987\" \"TMe-2050\" #> [427] \"TMe-3606\" \"TMe-3521\" \"TMe-410\"  \"TMe-3006\" \"TMe-1238\" \"TMe-1776\" #> [433] \"TMe-3087\" \"TMe-1907\" \"TMe-764\"  \"TMe-3353\" \"TMe-3297\" \"TMe-2128\" #> [439] \"TMe-1285\" \"TMe-306\"  \"TMe-3386\" \"TMe-1137\" \"TMe-3378\" \"TMe-3698\" #> [445] \"TMe-3411\" \"TMe-2863\" \"TMe-2833\" \"TMe-3210\" \"TMe-3316\" \"TMe-3071\" #> [451] \"TMe-2060\" \"TMe-2911\" \"TMe-3302\" \"TMe-3148\" \"TMe-1096\" \"TMe-723\"  #> [457] \"TMe-2790\" \"TMe-596\"  \"TMe-1204\" \"TMe-1076\" \"TMe-3382\" \"TMe-830\"  #> [463] \"TMe-2998\" \"TMe-828\"  \"TMe-660\"  \"TMe-972\"  \"TMe-2319\" \"TMe-2824\" #> [469] \"TMe-2733\" \"TMe-1444\" \"TMe-3151\" \"TMe-1178\" \"TMe-1890\" \"TMe-3219\" #> [475] \"TMe-842\"  \"TMe-821\"  \"TMe-2751\" \"TMe-3424\" \"TMe-7\"    \"TMe-1150\" #> [481] \"TMe-385\"  \"TMe-2518\" \"TMe-3089\" \"TMe-477\"  \"TMe-2204\" \"TMe-3267\" #> [487] \"TMe-1756\" \"TMe-93\"   \"TMe-3451\" \"TMe-290\"  \"TMe-816\"  \"TMe-1300\" #> [493] \"TMe-3417\" \"TMe-2945\" \"TMe-1507\" \"TMe-2922\" \"TMe-3230\" \"TMe-383\"  #> [499] \"TMe-1375\" \"TMe-2213\" \"TMe-1554\" \"TMe-1575\" \"TMe-2372\" \"TMe-391\"  #> [505] \"TMe-2820\" \"TMe-3633\" \"TMe-674\"  \"TMe-2205\" \"TMe-690\"  \"TMe-3284\" #> [511] \"TMe-3608\" \"TMe-1366\" \"TMe-2958\" \"TMe-3236\" \"TMe-1381\" \"TMe-2977\" #> [517] \"TMe-3025\" \"TMe-1294\" \"TMe-1459\" \"TMe-3045\" \"TMe-1385\" \"TMe-3571\" #> [523] \"TMe-2947\" \"TMe-2441\" \"TMe-2361\" \"TMe-3261\" \"TMe-2332\" \"TMe-735\"  #> [529] \"TMe-1863\" \"TMe-893\"  \"TMe-1787\" \"TMe-180\"  \"TMe-1347\" \"TMe-1819\" #> [535] \"TMe-2066\" \"TMe-48\"   \"TMe-3021\" \"TMe-1468\" \"TMe-1078\" \"TMe-1922\" #> [541] \"TMe-2927\" \"TMe-2435\" \"TMe-12\"   \"TMe-1614\" \"TMe-3144\" \"TMe-925\"  #> [547] \"TMe-885\"  \"TMe-3118\" \"TMe-2026\" \"TMe-188\"  \"TMe-419\"  \"TMe-3220\" #> [553] \"TMe-2552\" \"TMe-1273\" \"TMe-2910\" \"TMe-1431\" \"TMe-2973\" \"TMe-819\"  #> [559] \"TMe-791\"  \"TMe-1307\" \"TMe-299\"  \"TMe-3592\" \"TMe-3229\" \"TMe-2968\" #> [565] \"TMe-2000\" \"TMe-675\"  \"TMe-3533\" \"TMe-340\"  \"TMe-189\"  \"TMe-3043\" #> [571] \"TMe-150\"  \"TMe-1171\" \"TMe-3132\" \"TMe-3434\" \"TMe-594\"  \"TMe-2843\" #> [577] \"TMe-2959\" \"TMe-1160\" \"TMe-3569\" \"TMe-3443\" \"TMe-142\"  \"TMe-1680\" #> [583] \"TMe-3133\" \"TMe-3416\" \"TMe-673\"  \"TMe-2952\" \"TMe-1390\" \"TMe-2807\" #> [589] \"TMe-1556\" \"TMe-3020\" \"TMe-2192\" \"TMe-3530\" \"TMe-3169\" \"TMe-1732\" #> [595] \"TMe-3465\" \"TMe-1339\" \"TMe-1248\" \"TMe-3166\" \"TMe-1399\" \"TMe-155\"  #> [601] \"TMe-405\"  \"TMe-2823\" \"TMe-1646\" \"TMe-797\"  \"TMe-2388\" \"TMe-3591\" #> [607] \"TMe-876\"  \"TMe-1766\" \"TMe-3537\" \"TMe-2410\" \"TMe-3007\" \"TMe-3659\" #> [613] \"TMe-360\"  \"TMe-1427\" \"TMe-99\"   \"TMe-3409\" \"TMe-2211\" \"TMe-1332\" #> [619] \"TMe-3490\" \"TMe-1262\" \"TMe-1871\" \"TMe-3357\" \"TMe-617\"  \"TMe-3750\" #> [625] \"TMe-3028\" \"TMe-13\"   \"TMe-2926\" \"TMe-886\"  \"TMe-2776\" \"TMe-104\"  #> [631] \"TMe-2200\" \"TMe-2995\" \"TMe-1196\" \"TMe-3724\" \"TMe-1521\" \"TMe-528\"  #> [637] \"TMe-727\"  \"TMe-3208\" \"TMe-1836\" \"TMe-304\"  \"TMe-3209\" \"TMe-976\"  #> [643] \"TMe-1405\" \"TMe-1148\" \"TMe-717\"  \"TMe-3346\" \"TMe-3084\" \"TMe-1388\" #> [649] \"TMe-1062\" \"TMe-14\"   \"TMe-2240\" \"TMe-1900\" \"TMe-6\"    \"TMe-946\"  #> [655] \"TMe-1011\" \"TMe-3590\" \"TMe-3376\" \"TMe-897\"  \"TMe-3781\" \"TMe-3189\" #> [661] \"TMe-478\"  \"TMe-3800\" \"TMe-3085\" \"TMe-1580\" \"TMe-3484\" \"TMe-2748\" #> [667] \"TMe-1256\" \"TMe-838\"  \"TMe-3145\" \"TMe-1484\" \"TMe-2329\" \"TMe-707\"  #> [673] \"TMe-1716\" \"TMe-1443\" \"TMe-2956\" \"TMe-3539\" \"TMe-975\"  \"TMe-930\"  #> [679] \"TMe-655\"  \"TMe-3415\" \"TMe-1668\" \"TMe-307\"  \"TMe-3538\" \"TMe-777\"  #> [685] \"TMe-1725\" \"TMe-1762\" \"TMe-826\"  \"TMe-64\"   \"TMe-589\"  \"TMe-3052\" #> [691] \"TMe-3066\" \"TMe-1312\" \"TMe-2814\" \"TMe-3127\" \"TMe-1144\" \"TMe-3371\" #> [697] \"TMe-3772\" \"TMe-1398\" \"TMe-3598\" \"TMe-204\"  \"TMe-3354\" \"TMe-2535\" #> [703] \"TMe-2226\" \"TMe-556\"  \"TMe-3461\" \"TMe-1901\" \"TMe-1391\" \"TMe-954\"  #> [709] \"TMe-1864\" \"TMe-1411\" \"TMe-3471\" \"TMe-3329\" \"TMe-245\"  \"TMe-648\"  #> [715] \"TMe-3031\" \"TMe-59\"   \"TMe-1293\" \"TMe-2242\" \"TMe-1838\" \"TMe-1482\" #> [721] \"TMe-550\"  \"TMe-399\"  \"TMe-2119\" \"TMe-90\"   \"TMe-592\"  \"TMe-312\"  #> [727] \"TMe-667\"  \"TMe-3242\" \"TMe-3667\" \"TMe-3447\" \"TMe-275\"  \"TMe-3338\" #> [733] \"TMe-394\"  \"TMe-2285\" \"TMe-3068\" \"TMe-1325\" \"TMe-600\"  \"TMe-1215\" #> [739] \"TMe-407\"  \"TMe-200\"  \"TMe-1833\" \"TMe-2251\" \"TMe-919\"  \"TMe-884\"  #> [745] \"TMe-2954\" \"TMe-796\"  \"TMe-3322\" \"TMe-203\"  \"TMe-2800\" \"TMe-2458\" #> [751] \"TMe-1505\" \"TMe-1817\" \"TMe-892\"  \"TMe-3019\" \"TMe-1409\" \"TMe-3761\" #> [757] \"TMe-2158\" \"TMe-211\"  \"TMe-1227\" \"TMe-2568\" \"TMe-1481\" \"TMe-1251\" #> [763] \"TMe-3324\" \"TMe-1621\" \"TMe-2138\" \"TMe-714\"  \"TMe-2611\" \"TMe-196\"  #> [769] \"TMe-3073\" \"TMe-3321\" \"TMe-1147\" \"TMe-1231\" \"TMe-3462\" \"TMe-2944\" #> [775] \"TMe-834\"  \"TMe-1051\" \"TMe-3069\" \"TMe-3593\" \"TMe-2502\" \"TMe-817\"  #> [781] \"TMe-3643\" \"TMe-995\"  \"TMe-3094\" \"TMe-903\"  \"TMe-1286\" \"TMe-2167\" #> [787] \"TMe-3269\" \"TMe-3602\" \"TMe-53\"   \"TMe-1100\" \"TMe-1166\" \"TMe-3340\" #> [793] \"TMe-1858\" \"TMe-982\"  \"TMe-281\"  \"TMe-3239\" \"TMe-1788\" \"TMe-3147\" #> [799] \"TMe-3248\" \"TMe-1652\" \"TMe-2802\" \"TMe-3029\" \"TMe-1965\" \"TMe-3257\" #> [805] \"TMe-1156\" \"TMe-669\"  \"TMe-1832\" \"TMe-645\"  \"TMe-997\"  \"TMe-1622\" #> [811] \"TMe-2935\" \"TMe-237\"  \"TMe-3191\" \"TMe-794\"  \"TMe-513\"  \"TMe-2936\" #> [817] \"TMe-365\"  \"TMe-2247\" \"TMe-1139\" \"TMe-3207\" \"TMe-348\"  \"TMe-1489\"  # Fetch genotype names of core set by logistic regression criterion subset(x = out2, criterion = \"logistic\") #>   [1] \"TMe-1004\" \"TMe-2953\" \"TMe-2010\" \"TMe-1020\" \"TMe-1511\" \"TMe-1174\" #>   [7] \"TMe-35\"   \"TMe-1461\" \"TMe-3054\" \"TMe-963\"  \"TMe-2567\" \"TMe-867\"  #>  [13] \"TMe-3222\" \"TMe-3428\" \"TMe-5\"    \"TMe-2304\" \"TMe-937\"  \"TMe-1875\" #>  [19] \"TMe-2985\" \"TMe-696\"  \"TMe-1124\" \"TMe-3396\" \"TMe-2853\" \"TMe-606\"  #>  [25] \"TMe-2033\" \"TMe-3255\" \"TMe-1232\" \"TMe-2996\" \"TMe-3112\" \"TMe-3026\" #>  [31] \"TMe-1796\" \"TMe-41\"   \"TMe-2355\" \"TMe-3095\" \"TMe-3736\" \"TMe-1025\" #>  [37] \"TMe-3252\" \"TMe-2993\" \"TMe-2967\" \"TMe-3282\" \"TMe-1769\" \"TMe-289\"  #>  [43] \"TMe-3281\" \"TMe-3466\" \"TMe-241\"  \"TMe-3266\" \"TMe-3330\" \"TMe-3264\" #>  [49] \"TMe-3249\" \"TMe-3262\" \"TMe-3493\" \"TMe-1042\" \"TMe-3690\" \"TMe-514\"  #>  [55] \"TMe-856\"  \"TMe-2064\" \"TMe-2809\" \"TMe-3475\" \"TMe-1661\" \"TMe-1995\" #>  [61] \"TMe-3272\" \"TMe-465\"  \"TMe-3319\" \"TMe-2534\" \"TMe-3549\" \"TMe-1053\" #>  [67] \"TMe-3323\" \"TMe-2980\" \"TMe-2069\" \"TMe-2604\" \"TMe-2981\" \"TMe-3140\" #>  [73] \"TMe-3223\" \"TMe-1633\" \"TMe-969\"  \"TMe-3116\" \"TMe-457\"  \"TMe-3389\" #>  [79] \"TMe-2083\" \"TMe-225\"  \"TMe-160\"  \"TMe-2413\" \"TMe-1403\" \"TMe-751\"  #>  [85] \"TMe-3141\" \"TMe-2906\" \"TMe-2971\" \"TMe-1416\" \"TMe-2439\" \"TMe-2890\" #>  [91] \"TMe-3030\" \"TMe-1164\" \"TMe-698\"  \"TMe-3398\" \"TMe-3387\" \"TMe-551\"  #>  [97] \"TMe-1428\" \"TMe-1392\" \"TMe-267\"  \"TMe-1988\" \"TMe-3065\" \"TMe-3392\" #> [103] \"TMe-3730\" \"TMe-3115\" \"TMe-1026\" \"TMe-3766\" \"TMe-3185\" \"TMe-185\"  #> [109] \"TMe-756\"  \"TMe-2172\" \"TMe-1814\" \"TMe-154\"  \"TMe-1564\" \"TMe-761\"  #> [115] \"TMe-3394\" \"TMe-2352\" \"TMe-956\"  \"TMe-3046\" \"TMe-1985\" \"TMe-540\"  #> [121] \"TMe-985\"  \"TMe-656\"  \"TMe-3771\" \"TMe-1723\" \"TMe-2785\" \"TMe-1158\" #> [127] \"TMe-1992\" \"TMe-1074\" \"TMe-266\"  \"TMe-2308\" \"TMe-138\"  \"TMe-2957\" #> [133] \"TMe-2195\" \"TMe-1579\" \"TMe-2004\" \"TMe-1518\" \"TMe-3253\" \"TMe-1608\" #> [139] \"TMe-2196\" \"TMe-936\"  \"TMe-480\"  \"TMe-1600\" \"TMe-1506\" \"TMe-2018\" #> [145] \"TMe-1266\" \"TMe-650\"  \"TMe-1239\" \"TMe-3088\" \"TMe-3111\" \"TMe-2045\" #> [151] \"TMe-3299\" \"TMe-1383\" \"TMe-3422\" \"TMe-44\"   \"TMe-2756\" \"TMe-3200\" #> [157] \"TMe-3663\" \"TMe-3478\" \"TMe-3437\" \"TMe-3605\" \"TMe-2907\" \"TMe-3445\" #> [163] \"TMe-1775\" \"TMe-1809\" \"TMe-1902\" \"TMe-3596\" \"TMe-3055\" \"TMe-3225\" #> [169] \"TMe-3805\" \"TMe-620\"  \"TMe-38\"   \"TMe-2031\" \"TMe-2913\" \"TMe-2914\" #> [175] \"TMe-2510\" \"TMe-2975\" \"TMe-1960\" \"TMe-3760\" \"TMe-3276\" \"TMe-2551\" #> [181] \"TMe-1425\" \"TMe-2916\" \"TMe-3314\" \"TMe-43\"   \"TMe-3277\" \"TMe-25\"   #> [187] \"TMe-2934\" \"TMe-3401\" \"TMe-1744\" \"TMe-3568\" \"TMe-2901\" \"TMe-3544\" #> [193] \"TMe-754\"  \"TMe-3143\" \"TMe-2810\" \"TMe-3274\" \"TMe-3485\" \"TMe-2955\" #> [199] \"TMe-536\"  \"TMe-3128\" \"TMe-3345\" \"TMe-3594\" \"TMe-378\"  \"TMe-3383\" #> [205] \"TMe-712\"  \"TMe-2041\" \"TMe-2912\" \"TMe-3628\" \"TMe-2217\" \"TMe-3707\" #> [211] \"TMe-2216\" \"TMe-2965\" \"TMe-1283\" \"TMe-3715\" \"TMe-3631\" \"TMe-3721\" #> [217] \"TMe-215\"  \"TMe-1226\" \"TMe-3480\" \"TMe-397\"  \"TMe-181\"  \"TMe-420\"  #> [223] \"TMe-280\"  \"TMe-1734\" \"TMe-619\"  \"TMe-3572\" \"TMe-3547\" \"TMe-3719\" #> [229] \"TMe-1479\" \"TMe-3397\" \"TMe-2860\" \"TMe-34\"   \"TMe-3234\" \"TMe-1218\" #> [235] \"TMe-3458\" \"TMe-3051\" \"TMe-778\"  \"TMe-1241\" \"TMe-352\"  \"TMe-1360\" #> [241] \"TMe-737\"  \"TMe-3638\" \"TMe-276\"  \"TMe-434\"  \"TMe-132\"  \"TMe-3167\" #> [247] \"TMe-509\"  \"TMe-3275\" \"TMe-774\"  \"TMe-1250\" \"TMe-3599\" \"TMe-2897\" #> [253] \"TMe-226\"  \"TMe-1700\" \"TMe-3576\" \"TMe-259\"  \"TMe-812\"  \"TMe-3312\" #> [259] \"TMe-1935\" \"TMe-74\"   \"TMe-15\"   \"TMe-190\"  \"TMe-3359\" \"TMe-3625\" #> [265] \"TMe-39\"   \"TMe-1301\" \"TMe-2791\" \"TMe-3238\" \"TMe-1566\" \"TMe-3619\" #> [271] \"TMe-2572\" \"TMe-1353\" \"TMe-2811\" \"TMe-1162\" \"TMe-3027\" \"TMe-3440\" #> [277] \"TMe-1434\" \"TMe-3481\" \"TMe-3198\" \"TMe-663\"  \"TMe-2979\" \"TMe-2237\" #> [283] \"TMe-270\"  \"TMe-3256\" \"TMe-853\"  \"TMe-1738\" \"TMe-362\"  \"TMe-3758\" #> [289] \"TMe-1401\" \"TMe-3278\" \"TMe-1916\" \"TMe-234\"  \"TMe-261\"  \"TMe-950\"  #> [295] \"TMe-635\"  \"TMe-184\"  \"TMe-277\"  \"TMe-107\"  \"TMe-28\"   \"TMe-1883\" #> [301] \"TMe-268\"  \"TMe-279\"  \"TMe-27\"   \"TMe-1099\" \"TMe-2688\" \"TMe-2779\" #> [307] \"TMe-3545\" \"TMe-2058\" \"TMe-1897\" \"TMe-116\"  \"TMe-1265\" \"TMe-40\"   #> [313] \"TMe-2866\" \"TMe-186\"  \"TMe-130\"  \"TMe-773\"  \"TMe-72\"   \"TMe-3418\" #> [319] \"TMe-725\"  \"TMe-123\"  \"TMe-2835\" \"TMe-3325\" #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ # Get core sets with PCSS (quantitative and qualitative data) #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~  out3 <- pcss.core(data = data, names = \"Genotypes\",                   quantitative = quant,                   qualitative = qual, eigen.threshold = NULL)  # Core sets out3$cores.info #>                   Method Size   VarRet #> 1      By size specified  337 44.63182 #> 2  By threshold variance  859 75.00000 #> 3 By logistic regression  412 50.02493  # Fetch genotype names of core set by size criterion subset(x = out3, criterion = \"size\") #>   [1] \"TMe-3163\" \"TMe-603\"  \"TMe-3685\" \"TMe-3223\" \"TMe-2967\" \"TMe-3667\" #>   [7] \"TMe-3736\" \"TMe-3292\" \"TMe-399\"  \"TMe-3605\" \"TMe-3705\" \"TMe-3800\" #>  [13] \"TMe-3475\" \"TMe-2604\" \"TMe-3573\" \"TMe-3628\" \"TMe-616\"  \"TMe-1985\" #>  [19] \"TMe-3392\" \"TMe-2943\" \"TMe-3065\" \"TMe-3396\" \"TMe-3319\" \"TMe-901\"  #>  [25] \"TMe-2996\" \"TMe-2853\" \"TMe-2050\" \"TMe-3730\" \"TMe-3249\" \"TMe-3095\" #>  [31] \"TMe-1769\" \"TMe-3387\" \"TMe-3398\" \"TMe-3701\" \"TMe-2035\" \"TMe-1730\" #>  [37] \"TMe-390\"  \"TMe-3466\" \"TMe-812\"  \"TMe-761\"  \"TMe-41\"   \"TMe-608\"  #>  [43] \"TMe-3549\" \"TMe-3281\" \"TMe-3323\" \"TMe-731\"  \"TMe-2531\" \"TMe-3266\" #>  [49] \"TMe-3116\" \"TMe-2064\" \"TMe-3115\" \"TMe-3282\" \"TMe-696\"  \"TMe-756\"  #>  [55] \"TMe-1416\" \"TMe-707\"  \"TMe-3264\" \"TMe-1661\" \"TMe-3389\" \"TMe-3694\" #>  [61] \"TMe-3766\" \"TMe-13\"   \"TMe-2033\" \"TMe-3141\" \"TMe-3297\" \"TMe-2983\" #>  [67] \"TMe-867\"  \"TMe-412\"  \"TMe-1239\" \"TMe-3140\" \"TMe-1723\" \"TMe-2352\" #>  [73] \"TMe-2010\" \"TMe-2196\" \"TMe-138\"  \"TMe-1403\" \"TMe-2993\" \"TMe-606\"  #>  [79] \"TMe-798\"  \"TMe-1919\" \"TMe-3252\" \"TMe-2195\" \"TMe-1124\" \"TMe-1294\" #>  [85] \"TMe-1232\" \"TMe-717\"  \"TMe-3437\" \"TMe-997\"  \"TMe-2985\" \"TMe-1506\" #>  [91] \"TMe-1307\" \"TMe-929\"  \"TMe-3054\" \"TMe-373\"  \"TMe-2308\" \"TMe-2963\" #>  [97] \"TMe-1518\" \"TMe-1902\" \"TMe-35\"   \"TMe-620\"  \"TMe-2045\" \"TMe-2913\" #> [103] \"TMe-241\"  \"TMe-2955\" \"TMe-1809\" \"TMe-588\"  \"TMe-3641\" \"TMe-514\"  #> [109] \"TMe-3330\" \"TMe-1608\" \"TMe-1283\" \"TMe-1011\" \"TMe-2952\" \"TMe-1428\" #> [115] \"TMe-1744\" \"TMe-3025\" \"TMe-1564\" \"TMe-3314\" \"TMe-1383\" \"TMe-527\"  #> [121] \"TMe-3089\" \"TMe-432\"  \"TMe-2510\" \"TMe-623\"  \"TMe-3272\" \"TMe-1261\" #> [127] \"TMe-705\"  \"TMe-3805\" \"TMe-3040\" \"TMe-465\"  \"TMe-3690\" \"TMe-3034\" #> [133] \"TMe-3698\" \"TMe-728\"  \"TMe-2441\" \"TMe-3485\" \"TMe-2439\" \"TMe-1339\" #> [139] \"TMe-86\"   \"TMe-3581\" \"TMe-1158\" \"TMe-2204\" \"TMe-427\"  \"TMe-1633\" #> [145] \"TMe-659\"  \"TMe-751\"  \"TMe-725\"  \"TMe-3415\" \"TMe-861\"  \"TMe-815\"  #> [151] \"TMe-421\"  \"TMe-2329\" \"TMe-2916\" \"TMe-1137\" \"TMe-2043\" \"TMe-289\"  #> [157] \"TMe-93\"   \"TMe-3467\" \"TMe-3200\" \"TMe-3382\" \"TMe-3406\" \"TMe-85\"   #> [163] \"TMe-1945\" \"TMe-27\"   \"TMe-2968\" \"TMe-1646\" \"TMe-1992\" \"TMe-3592\" #> [169] \"TMe-1738\" \"TMe-1248\" \"TMe-2897\" \"TMe-5\"    \"TMe-267\"  \"TMe-584\"  #> [175] \"TMe-3401\" \"TMe-3230\" \"TMe-926\"  \"TMe-3234\" \"TMe-2733\" \"TMe-3222\" #> [181] \"TMe-3071\" \"TMe-3565\" \"TMe-3046\" \"TMe-3571\" \"TMe-832\"  \"TMe-3007\" #> [187] \"TMe-1004\" \"TMe-2984\" \"TMe-3596\" \"TMe-2751\" \"TMe-1775\" \"TMe-2843\" #> [193] \"TMe-925\"  \"TMe-3299\" \"TMe-3329\" \"TMe-1388\" \"TMe-1273\" \"TMe-3721\" #> [199] \"TMe-3663\" \"TMe-1098\" \"TMe-7\"    \"TMe-2906\" \"TMe-2151\" \"TMe-2940\" #> [205] \"TMe-2756\" \"TMe-745\"  \"TMe-3572\" \"TMe-3451\" \"TMe-742\"  \"TMe-3130\" #> [211] \"TMe-3659\" \"TMe-3277\" \"TMe-473\"  \"TMe-2995\" \"TMe-2998\" \"TMe-3493\" #> [217] \"TMe-2976\" \"TMe-863\"  \"TMe-3087\" \"TMe-2802\" \"TMe-3066\" \"TMe-3302\" #> [223] \"TMe-835\"  \"TMe-1579\" \"TMe-698\"  \"TMe-2914\" \"TMe-1600\" \"TMe-1580\" #> [229] \"TMe-64\"   \"TMe-842\"  \"TMe-3631\" \"TMe-3346\" \"TMe-3085\" \"TMe-3255\" #> [235] \"TMe-3544\" \"TMe-853\"  \"TMe-1817\" \"TMe-438\"  \"TMe-3533\" \"TMe-589\"  #> [241] \"TMe-886\"  \"TMe-2862\" \"TMe-2119\" \"TMe-365\"  \"TMe-3207\" \"TMe-2811\" #> [247] \"TMe-2361\" \"TMe-44\"   \"TMe-2355\" \"TMe-1160\" \"TMe-3599\" \"TMe-3531\" #> [253] \"TMe-39\"   \"TMe-635\"  \"TMe-1218\" \"TMe-6\"    \"TMe-1725\" \"TMe-3498\" #> [259] \"TMe-1286\" \"TMe-3238\" \"TMe-3118\" \"TMe-3352\" \"TMe-1958\" \"TMe-1398\" #> [265] \"TMe-694\"  \"TMe-1401\" \"TMe-2981\" \"TMe-203\"  \"TMe-773\"  \"TMe-2901\" #> [271] \"TMe-304\"  \"TMe-3101\" \"TMe-1444\" \"TMe-1792\" \"TMe-3088\" \"TMe-2040\" #> [277] \"TMe-3133\" \"TMe-1079\" \"TMe-2912\" \"TMe-34\"   \"TMe-3575\" \"TMe-3608\" #> [283] \"TMe-312\"  \"TMe-787\"  \"TMe-3440\" \"TMe-3433\" \"TMe-700\"  \"TMe-601\"  #> [289] \"TMe-2551\" \"TMe-2004\" \"TMe-394\"  \"TMe-2518\" \"TMe-946\"  \"TMe-3707\" #> [295] \"TMe-1838\" \"TMe-3026\" \"TMe-2374\" \"TMe-3434\" \"TMe-2748\" \"TMe-617\"  #> [301] \"TMe-2910\" \"TMe-3043\" \"TMe-400\"  \"TMe-2966\" \"TMe-1875\" \"TMe-976\"  #> [307] \"TMe-3112\" \"TMe-360\"  \"TMe-2860\" \"TMe-3480\" \"TMe-3209\" \"TMe-2957\" #> [313] \"TMe-196\"  \"TMe-3569\" \"TMe-2158\" \"TMe-2304\" \"TMe-363\"  \"TMe-1472\" #> [319] \"TMe-3772\" \"TMe-43\"   \"TMe-1461\" \"TMe-1988\" \"TMe-3055\" \"TMe-15\"   #> [325] \"TMe-656\"  \"TMe-434\"  \"TMe-3324\" \"TMe-391\"  \"TMe-1147\" \"TMe-33\"   #> [331] \"TMe-154\"  \"TMe-3443\" \"TMe-148\"  \"TMe-59\"   \"TMe-3601\" \"TMe-1198\" #> [337] \"TMe-3114\"  # Fetch genotype names of core set by variance criterion subset(x = out3, criterion = \"variance\") #>   [1] \"TMe-3163\" \"TMe-603\"  \"TMe-3685\" \"TMe-3223\" \"TMe-2967\" \"TMe-3667\" #>   [7] \"TMe-3736\" \"TMe-3292\" \"TMe-399\"  \"TMe-3605\" \"TMe-3705\" \"TMe-3800\" #>  [13] \"TMe-3475\" \"TMe-2604\" \"TMe-3573\" \"TMe-3628\" \"TMe-616\"  \"TMe-1985\" #>  [19] \"TMe-3392\" \"TMe-2943\" \"TMe-3065\" \"TMe-3396\" \"TMe-3319\" \"TMe-901\"  #>  [25] \"TMe-2996\" \"TMe-2853\" \"TMe-2050\" \"TMe-3730\" \"TMe-3249\" \"TMe-3095\" #>  [31] \"TMe-1769\" \"TMe-3387\" \"TMe-3398\" \"TMe-3701\" \"TMe-2035\" \"TMe-1730\" #>  [37] \"TMe-390\"  \"TMe-3466\" \"TMe-812\"  \"TMe-761\"  \"TMe-41\"   \"TMe-608\"  #>  [43] \"TMe-3549\" \"TMe-3281\" \"TMe-3323\" \"TMe-731\"  \"TMe-2531\" \"TMe-3266\" #>  [49] \"TMe-3116\" \"TMe-2064\" \"TMe-3115\" \"TMe-3282\" \"TMe-696\"  \"TMe-756\"  #>  [55] \"TMe-1416\" \"TMe-707\"  \"TMe-3264\" \"TMe-1661\" \"TMe-3389\" \"TMe-3694\" #>  [61] \"TMe-3766\" \"TMe-13\"   \"TMe-2033\" \"TMe-3141\" \"TMe-3297\" \"TMe-2983\" #>  [67] \"TMe-867\"  \"TMe-412\"  \"TMe-1239\" \"TMe-3140\" \"TMe-1723\" \"TMe-2352\" #>  [73] \"TMe-2010\" \"TMe-2196\" \"TMe-138\"  \"TMe-1403\" \"TMe-2993\" \"TMe-606\"  #>  [79] \"TMe-798\"  \"TMe-1919\" \"TMe-3252\" \"TMe-2195\" \"TMe-1124\" \"TMe-1294\" #>  [85] \"TMe-1232\" \"TMe-717\"  \"TMe-3437\" \"TMe-997\"  \"TMe-2985\" \"TMe-1506\" #>  [91] \"TMe-1307\" \"TMe-929\"  \"TMe-3054\" \"TMe-373\"  \"TMe-2308\" \"TMe-2963\" #>  [97] \"TMe-1518\" \"TMe-1902\" \"TMe-35\"   \"TMe-620\"  \"TMe-2045\" \"TMe-2913\" #> [103] \"TMe-241\"  \"TMe-2955\" \"TMe-1809\" \"TMe-588\"  \"TMe-3641\" \"TMe-514\"  #> [109] \"TMe-3330\" \"TMe-1608\" \"TMe-1283\" \"TMe-1011\" \"TMe-2952\" \"TMe-1428\" #> [115] \"TMe-1744\" \"TMe-3025\" \"TMe-1564\" \"TMe-3314\" \"TMe-1383\" \"TMe-527\"  #> [121] \"TMe-3089\" \"TMe-432\"  \"TMe-2510\" \"TMe-623\"  \"TMe-3272\" \"TMe-1261\" #> [127] \"TMe-705\"  \"TMe-3805\" \"TMe-3040\" \"TMe-465\"  \"TMe-3690\" \"TMe-3034\" #> [133] \"TMe-3698\" \"TMe-728\"  \"TMe-2441\" \"TMe-3485\" \"TMe-2439\" \"TMe-1339\" #> [139] \"TMe-86\"   \"TMe-3581\" \"TMe-1158\" \"TMe-2204\" \"TMe-427\"  \"TMe-1633\" #> [145] \"TMe-659\"  \"TMe-751\"  \"TMe-725\"  \"TMe-3415\" \"TMe-861\"  \"TMe-815\"  #> [151] \"TMe-421\"  \"TMe-2329\" \"TMe-2916\" \"TMe-1137\" \"TMe-2043\" \"TMe-289\"  #> [157] \"TMe-93\"   \"TMe-3467\" \"TMe-3200\" \"TMe-3382\" \"TMe-3406\" \"TMe-85\"   #> [163] \"TMe-1945\" \"TMe-27\"   \"TMe-2968\" \"TMe-1646\" \"TMe-1992\" \"TMe-3592\" #> [169] \"TMe-1738\" \"TMe-1248\" \"TMe-2897\" \"TMe-5\"    \"TMe-267\"  \"TMe-584\"  #> [175] \"TMe-3401\" \"TMe-3230\" \"TMe-926\"  \"TMe-3234\" \"TMe-2733\" \"TMe-3222\" #> [181] \"TMe-3071\" \"TMe-3565\" \"TMe-3046\" \"TMe-3571\" \"TMe-832\"  \"TMe-3007\" #> [187] \"TMe-1004\" \"TMe-2984\" \"TMe-3596\" \"TMe-2751\" \"TMe-1775\" \"TMe-2843\" #> [193] \"TMe-925\"  \"TMe-3299\" \"TMe-3329\" \"TMe-1388\" \"TMe-1273\" \"TMe-3721\" #> [199] \"TMe-3663\" \"TMe-1098\" \"TMe-7\"    \"TMe-2906\" \"TMe-2151\" \"TMe-2940\" #> [205] \"TMe-2756\" \"TMe-745\"  \"TMe-3572\" \"TMe-3451\" \"TMe-742\"  \"TMe-3130\" #> [211] \"TMe-3659\" \"TMe-3277\" \"TMe-473\"  \"TMe-2995\" \"TMe-2998\" \"TMe-3493\" #> [217] \"TMe-2976\" \"TMe-863\"  \"TMe-3087\" \"TMe-2802\" \"TMe-3066\" \"TMe-3302\" #> [223] \"TMe-835\"  \"TMe-1579\" \"TMe-698\"  \"TMe-2914\" \"TMe-1600\" \"TMe-1580\" #> [229] \"TMe-64\"   \"TMe-842\"  \"TMe-3631\" \"TMe-3346\" \"TMe-3085\" \"TMe-3255\" #> [235] \"TMe-3544\" \"TMe-853\"  \"TMe-1817\" \"TMe-438\"  \"TMe-3533\" \"TMe-589\"  #> [241] \"TMe-886\"  \"TMe-2862\" \"TMe-2119\" \"TMe-365\"  \"TMe-3207\" \"TMe-2811\" #> [247] \"TMe-2361\" \"TMe-44\"   \"TMe-2355\" \"TMe-1160\" \"TMe-3599\" \"TMe-3531\" #> [253] \"TMe-39\"   \"TMe-635\"  \"TMe-1218\" \"TMe-6\"    \"TMe-1725\" \"TMe-3498\" #> [259] \"TMe-1286\" \"TMe-3238\" \"TMe-3118\" \"TMe-3352\" \"TMe-1958\" \"TMe-1398\" #> [265] \"TMe-694\"  \"TMe-1401\" \"TMe-2981\" \"TMe-203\"  \"TMe-773\"  \"TMe-2901\" #> [271] \"TMe-304\"  \"TMe-3101\" \"TMe-1444\" \"TMe-1792\" \"TMe-3088\" \"TMe-2040\" #> [277] \"TMe-3133\" \"TMe-1079\" \"TMe-2912\" \"TMe-34\"   \"TMe-3575\" \"TMe-3608\" #> [283] \"TMe-312\"  \"TMe-787\"  \"TMe-3440\" \"TMe-3433\" \"TMe-700\"  \"TMe-601\"  #> [289] \"TMe-2551\" \"TMe-2004\" \"TMe-394\"  \"TMe-2518\" \"TMe-946\"  \"TMe-3707\" #> [295] \"TMe-1838\" \"TMe-3026\" \"TMe-2374\" \"TMe-3434\" \"TMe-2748\" \"TMe-617\"  #> [301] \"TMe-2910\" \"TMe-3043\" \"TMe-400\"  \"TMe-2966\" \"TMe-1875\" \"TMe-976\"  #> [307] \"TMe-3112\" \"TMe-360\"  \"TMe-2860\" \"TMe-3480\" \"TMe-3209\" \"TMe-2957\" #> [313] \"TMe-196\"  \"TMe-3569\" \"TMe-2158\" \"TMe-2304\" \"TMe-363\"  \"TMe-1472\" #> [319] \"TMe-3772\" \"TMe-43\"   \"TMe-1461\" \"TMe-1988\" \"TMe-3055\" \"TMe-15\"   #> [325] \"TMe-656\"  \"TMe-434\"  \"TMe-3324\" \"TMe-391\"  \"TMe-1147\" \"TMe-33\"   #> [331] \"TMe-154\"  \"TMe-3443\" \"TMe-148\"  \"TMe-59\"   \"TMe-3601\" \"TMe-1198\" #> [337] \"TMe-3114\" \"TMe-3032\" \"TMe-160\"  \"TMe-298\"  \"TMe-1311\" \"TMe-3185\" #> [343] \"TMe-2128\" \"TMe-3458\" \"TMe-3781\" \"TMe-1819\" \"TMe-830\"  \"TMe-1814\" #> [349] \"TMe-1787\" \"TMe-3148\" \"TMe-3359\" \"TMe-3357\" \"TMe-340\"  \"TMe-2814\" #> [355] \"TMe-2530\" \"TMe-47\"   \"TMe-645\"  \"TMe-2383\" \"TMe-2809\" \"TMe-2973\" #> [361] \"TMe-1622\" \"TMe-1026\" \"TMe-3639\" \"TMe-729\"  \"TMe-25\"   \"TMe-3633\" #> [367] \"TMe-2937\" \"TMe-2226\" \"TMe-404\"  \"TMe-1006\" \"TMe-1101\" \"TMe-3445\" #> [373] \"TMe-383\"  \"TMe-4\"    \"TMe-2997\" \"TMe-2285\" \"TMe-1074\" \"TMe-1272\" #> [379] \"TMe-3326\" \"TMe-477\"  \"TMe-1250\" \"TMe-3383\" \"TMe-1312\" \"TMe-736\"  #> [385] \"TMe-3284\" \"TMe-280\"  \"TMe-995\"  \"TMe-1505\" \"TMe-3256\" \"TMe-878\"  #> [391] \"TMe-930\"  \"TMe-2257\" \"TMe-826\"  \"TMe-3679\" \"TMe-1420\" \"TMe-1521\" #> [397] \"TMe-1766\" \"TMe-1042\" \"TMe-3020\" \"TMe-3128\" \"TMe-279\"  \"TMe-123\"  #> [403] \"TMe-3557\" \"TMe-1762\" \"TMe-2217\" \"TMe-1227\" \"TMe-1790\" \"TMe-600\"  #> [409] \"TMe-2956\" \"TMe-754\"  \"TMe-3481\" \"TMe-2242\" \"TMe-3354\" \"TMe-893\"  #> [415] \"TMe-2824\" \"TMe-1863\" \"TMe-237\"  \"TMe-3591\" \"TMe-251\"  \"TMe-3273\" #> [421] \"TMe-569\"  \"TMe-3362\" \"TMe-3773\" \"TMe-410\"  \"TMe-28\"   \"TMe-74\"   #> [427] \"TMe-660\"  \"TMe-3465\" \"TMe-528\"  \"TMe-1621\" \"TMe-2203\" \"TMe-2123\" #> [433] \"TMe-1421\" \"TMe-994\"  \"TMe-1262\" \"TMe-2975\" \"TMe-1939\" \"TMe-2947\" #> [439] \"TMe-362\"  \"TMe-706\"  \"TMe-1964\" \"TMe-1484\" \"TMe-480\"  \"TMe-3166\" #> [445] \"TMe-1299\" \"TMe-420\"  \"TMe-3308\" \"TMe-3027\" \"TMe-510\"  \"TMe-3069\" #> [451] \"TMe-1616\" \"TMe-431\"  \"TMe-3540\" \"TMe-1266\" \"TMe-3028\" \"TMe-3594\" #> [457] \"TMe-14\"   \"TMe-2765\" \"TMe-1300\" \"TMe-3501\" \"TMe-206\"  \"TMe-23\"   #> [463] \"TMe-3321\" \"TMe-3428\" \"TMe-1553\" \"TMe-2356\" \"TMe-774\"  \"TMe-2757\" #> [469] \"TMe-1129\" \"TMe-575\"  \"TMe-1806\" \"TMe-1786\" \"TMe-38\"   \"TMe-405\"  #> [475] \"TMe-2077\" \"TMe-1732\" \"TMe-3365\" \"TMe-2069\" \"TMe-609\"  \"TMe-1051\" #> [481] \"TMe-2915\" \"TMe-3208\" \"TMe-104\"  \"TMe-2611\" \"TMe-1880\" \"TMe-1366\" #> [487] \"TMe-2481\" \"TMe-3642\" \"TMe-2502\" \"TMe-209\"  \"TMe-1409\" \"TMe-3143\" #> [493] \"TMe-2905\" \"TMe-1459\" \"TMe-1956\" \"TMe-3267\" \"TMe-330\"  \"TMe-90\"   #> [499] \"TMe-2041\" \"TMe-2779\" \"TMe-63\"   \"TMe-2362\" \"TMe-3376\" \"TMe-1969\" #> [505] \"TMe-3758\" \"TMe-1005\" \"TMe-3438\" \"TMe-3551\" \"TMe-2211\" \"TMe-2058\" #> [511] \"TMe-3312\" \"TMe-3248\" \"TMe-1765\" \"TMe-1422\" \"TMe-3274\" \"TMe-2200\" #> [517] \"TMe-3345\" \"TMe-3397\" \"TMe-675\"  \"TMe-78\"   \"TMe-2205\" \"TMe-2172\" #> [523] \"TMe-3127\" \"TMe-845\"  \"TMe-3325\" \"TMe-1269\" \"TMe-618\"  \"TMe-1020\" #> [529] \"TMe-1716\" \"TMe-1078\" \"TMe-1302\" \"TMe-2060\" \"TMe-184\"  \"TMe-1891\" #> [535] \"TMe-3724\" \"TMe-1100\" \"TMe-3625\" \"TMe-665\"  \"TMe-2592\" \"TMe-2705\" #> [541] \"TMe-2971\" \"TMe-1526\" \"TMe-460\"  \"TMe-3239\" \"TMe-1256\" \"TMe-3752\" #> [547] \"TMe-1717\" \"TMe-1431\" \"TMe-3471\" \"TMe-585\"  \"TMe-1797\" \"TMe-1965\" #> [553] \"TMe-155\"  \"TMe-3727\" \"TMe-3010\" \"TMe-3576\" \"TMe-210\"  \"TMe-2935\" #> [559] \"TMe-343\"  \"TMe-1405\" \"TMe-1643\" \"TMe-1150\" \"TMe-176\"  \"TMe-3558\" #> [565] \"TMe-1619\" \"TMe-2167\" \"TMe-2946\" \"TMe-487\"  \"TMe-359\"  \"TMe-2131\" #> [571] \"TMe-3216\" \"TMe-66\"   \"TMe-3242\" \"TMe-2845\" \"TMe-20\"   \"TMe-836\"  #> [577] \"TMe-1468\" \"TMe-2268\" \"TMe-1176\" \"TMe-3719\" \"TMe-3638\" \"TMe-1067\" #> [583] \"TMe-3218\" \"TMe-737\"  \"TMe-2169\" \"TMe-3093\" \"TMe-2797\" \"TMe-2066\" #> [589] \"TMe-3068\" \"TMe-57\"   \"TMe-3715\" \"TMe-2513\" \"TMe-1184\" \"TMe-3478\" #> [595] \"TMe-167\"  \"TMe-1547\" \"TMe-3455\" \"TMe-377\"  \"TMe-3250\" \"TMe-161\"  #> [601] \"TMe-333\"  \"TMe-2154\" \"TMe-1668\" \"TMe-12\"   \"TMe-53\"   \"TMe-1864\" #> [607] \"TMe-2977\" \"TMe-3132\" \"TMe-1836\" \"TMe-1288\" \"TMe-332\"  \"TMe-18\"   #> [613] \"TMe-174\"  \"TMe-594\"  \"TMe-2394\" \"TMe-3253\" \"TMe-70\"   \"TMe-2532\" #> [619] \"TMe-190\"  \"TMe-1007\" \"TMe-1425\" \"TMe-2332\" \"TMe-3176\" \"TMe-481\"  #> [625] \"TMe-674\"  \"TMe-1504\" \"TMe-1860\" \"TMe-2085\" \"TMe-1402\" \"TMe-727\"  #> [631] \"TMe-1907\" \"TMe-3030\" \"TMe-1271\" \"TMe-1975\" \"TMe-283\"  \"TMe-1293\" #> [637] \"TMe-1560\" \"TMe-1301\" \"TMe-200\"  \"TMe-2000\" \"TMe-2903\" \"TMe-651\"  #> [643] \"TMe-425\"  \"TMe-1739\" \"TMe-1204\" \"TMe-3351\" \"TMe-2851\" \"TMe-1359\" #> [649] \"TMe-3045\" \"TMe-1680\" \"TMe-1242\" \"TMe-1443\" \"TMe-1323\" \"TMe-3021\" #> [655] \"TMe-116\"  \"TMe-1138\" \"TMe-2161\" \"TMe-1025\" \"TMe-771\"  \"TMe-2337\" #> [661] \"TMe-2103\" \"TMe-428\"  \"TMe-3150\" \"TMe-903\"  \"TMe-1207\" \"TMe-1474\" #> [667] \"TMe-1833\" \"TMe-2810\" \"TMe-876\"  \"TMe-3073\" \"TMe-2911\" \"TMe-3317\" #> [673] \"TMe-1973\" \"TMe-1470\" \"TMe-3547\" \"TMe-419\"  \"TMe-3731\" \"TMe-261\"  #> [679] \"TMe-2823\" \"TMe-1376\" \"TMe-2917\" \"TMe-1577\" \"TMe-752\"  \"TMe-1572\" #> [685] \"TMe-1230\" \"TMe-3750\" \"TMe-3620\" \"TMe-3568\" \"TMe-2270\" \"TMe-1675\" #> [691] \"TMe-475\"  \"TMe-1257\" \"TMe-669\"  \"TMe-3804\" \"TMe-415\"  \"TMe-1423\" #> [697] \"TMe-2807\" \"TMe-3275\" \"TMe-3053\" \"TMe-1566\" \"TMe-3729\" \"TMe-2835\" #> [703] \"TMe-204\"  \"TMe-1507\" \"TMe-1889\" \"TMe-2944\" \"TMe-1734\" \"TMe-1107\" #> [709] \"TMe-631\"  \"TMe-3644\" \"TMe-3545\" \"TMe-1804\" \"TMe-610\"  \"TMe-1993\" #> [715] \"TMe-565\"  \"TMe-3029\" \"TMe-1305\" \"TMe-2926\" \"TMe-3147\" \"TMe-3643\" #> [721] \"TMe-2841\" \"TMe-3796\" \"TMe-3598\" \"TMe-1390\" \"TMe-1715\" \"TMe-2388\" #> [727] \"TMe-3278\" \"TMe-2054\" \"TMe-1776\" \"TMe-2866\" \"TMe-2410\" \"TMe-414\"  #> [733] \"TMe-777\"  \"TMe-3353\" \"TMe-945\"  \"TMe-1351\" \"TMe-170\"  \"TMe-2124\" #> [739] \"TMe-3052\" \"TMe-1700\" \"TMe-1483\" \"TMe-2057\" \"TMe-3113\" \"TMe-1995\" #> [745] \"TMe-3103\" \"TMe-1406\" \"TMe-429\"  \"TMe-67\"   \"TMe-1558\" \"TMe-247\"  #> [751] \"TMe-3151\" \"TMe-2800\" \"TMe-3074\" \"TMe-1873\" \"TMe-3031\" \"TMe-1140\" #> [757] \"TMe-215\"  \"TMe-1374\" \"TMe-1328\" \"TMe-750\"  \"TMe-2271\" \"TMe-1481\" #> [763] \"TMe-2347\" \"TMe-3371\" \"TMe-433\"  \"TMe-10\"   \"TMe-3460\" \"TMe-276\"  #> [769] \"TMe-924\"  \"TMe-3761\" \"TMe-3174\" \"TMe-975\"  \"TMe-3005\" \"TMe-2950\" #> [775] \"TMe-2535\" \"TMe-747\"  \"TMe-887\"  \"TMe-662\"  \"TMe-456\"  \"TMe-1830\" #> [781] \"TMe-60\"   \"TMe-3671\" \"TMe-3527\" \"TMe-2567\" \"TMe-3435\" \"TMe-1922\" #> [787] \"TMe-397\"  \"TMe-417\"  \"TMe-1910\" \"TMe-840\"  \"TMe-2083\" \"TMe-450\"  #> [793] \"TMe-1391\" \"TMe-2428\" \"TMe-526\"  \"TMe-3378\" \"TMe-398\"  \"TMe-1382\" #> [799] \"TMe-3236\" \"TMe-1987\" \"TMe-264\"  \"TMe-3008\" \"TMe-54\"   \"TMe-2568\" #> [805] \"TMe-2978\" \"TMe-2589\" \"TMe-2084\" \"TMe-551\"  \"TMe-3257\" \"TMe-3084\" #> [811] \"TMe-3100\" \"TMe-3495\" \"TMe-1979\" \"TMe-1251\" \"TMe-2213\" \"TMe-875\"  #> [817] \"TMe-870\"  \"TMe-277\"  \"TMe-3051\" \"TMe-1347\" \"TMe-3094\" \"TMe-655\"  #> [823] \"TMe-3771\" \"TMe-1162\" \"TMe-3261\" \"TMe-1960\" \"TMe-40\"   \"TMe-3336\" #> [829] \"TMe-1404\" \"TMe-1847\" \"TMe-3335\" \"TMe-3760\" \"TMe-2934\" \"TMe-218\"  #> [835] \"TMe-1479\" \"TMe-3259\" \"TMe-3220\" \"TMe-1593\" \"TMe-3556\" \"TMe-1698\" #> [841] \"TMe-3780\" \"TMe-1440\" \"TMe-3019\" \"TMe-2945\" \"TMe-464\"  \"TMe-3276\" #> [847] \"TMe-2412\" \"TMe-208\"  \"TMe-3110\" \"TMe-699\"  \"TMe-3726\" \"TMe-1694\" #> [853] \"TMe-2572\" \"TMe-885\"  \"TMe-3564\" \"TMe-150\"  \"TMe-1118\" \"TMe-186\"  #> [859] \"TMe-768\"   # Fetch genotype names of core set by logistic regression criterion subset(x = out3, criterion = \"logistic\") #>   [1] \"TMe-3163\" \"TMe-603\"  \"TMe-3685\" \"TMe-3223\" \"TMe-2967\" \"TMe-3667\" #>   [7] \"TMe-3736\" \"TMe-3292\" \"TMe-399\"  \"TMe-3605\" \"TMe-3705\" \"TMe-3800\" #>  [13] \"TMe-3475\" \"TMe-2604\" \"TMe-3573\" \"TMe-3628\" \"TMe-616\"  \"TMe-1985\" #>  [19] \"TMe-3392\" \"TMe-2943\" \"TMe-3065\" \"TMe-3396\" \"TMe-3319\" \"TMe-901\"  #>  [25] \"TMe-2996\" \"TMe-2853\" \"TMe-2050\" \"TMe-3730\" \"TMe-3249\" \"TMe-3095\" #>  [31] \"TMe-1769\" \"TMe-3387\" \"TMe-3398\" \"TMe-3701\" \"TMe-2035\" \"TMe-1730\" #>  [37] \"TMe-390\"  \"TMe-3466\" \"TMe-812\"  \"TMe-761\"  \"TMe-41\"   \"TMe-608\"  #>  [43] \"TMe-3549\" \"TMe-3281\" \"TMe-3323\" \"TMe-731\"  \"TMe-2531\" \"TMe-3266\" #>  [49] \"TMe-3116\" \"TMe-2064\" \"TMe-3115\" \"TMe-3282\" \"TMe-696\"  \"TMe-756\"  #>  [55] \"TMe-1416\" \"TMe-707\"  \"TMe-3264\" \"TMe-1661\" \"TMe-3389\" \"TMe-3694\" #>  [61] \"TMe-3766\" \"TMe-13\"   \"TMe-2033\" \"TMe-3141\" \"TMe-3297\" \"TMe-2983\" #>  [67] \"TMe-867\"  \"TMe-412\"  \"TMe-1239\" \"TMe-3140\" \"TMe-1723\" \"TMe-2352\" #>  [73] \"TMe-2010\" \"TMe-2196\" \"TMe-138\"  \"TMe-1403\" \"TMe-2993\" \"TMe-606\"  #>  [79] \"TMe-798\"  \"TMe-1919\" \"TMe-3252\" \"TMe-2195\" \"TMe-1124\" \"TMe-1294\" #>  [85] \"TMe-1232\" \"TMe-717\"  \"TMe-3437\" \"TMe-997\"  \"TMe-2985\" \"TMe-1506\" #>  [91] \"TMe-1307\" \"TMe-929\"  \"TMe-3054\" \"TMe-373\"  \"TMe-2308\" \"TMe-2963\" #>  [97] \"TMe-1518\" \"TMe-1902\" \"TMe-35\"   \"TMe-620\"  \"TMe-2045\" \"TMe-2913\" #> [103] \"TMe-241\"  \"TMe-2955\" \"TMe-1809\" \"TMe-588\"  \"TMe-3641\" \"TMe-514\"  #> [109] \"TMe-3330\" \"TMe-1608\" \"TMe-1283\" \"TMe-1011\" \"TMe-2952\" \"TMe-1428\" #> [115] \"TMe-1744\" \"TMe-3025\" \"TMe-1564\" \"TMe-3314\" \"TMe-1383\" \"TMe-527\"  #> [121] \"TMe-3089\" \"TMe-432\"  \"TMe-2510\" \"TMe-623\"  \"TMe-3272\" \"TMe-1261\" #> [127] \"TMe-705\"  \"TMe-3805\" \"TMe-3040\" \"TMe-465\"  \"TMe-3690\" \"TMe-3034\" #> [133] \"TMe-3698\" \"TMe-728\"  \"TMe-2441\" \"TMe-3485\" \"TMe-2439\" \"TMe-1339\" #> [139] \"TMe-86\"   \"TMe-3581\" \"TMe-1158\" \"TMe-2204\" \"TMe-427\"  \"TMe-1633\" #> [145] \"TMe-659\"  \"TMe-751\"  \"TMe-725\"  \"TMe-3415\" \"TMe-861\"  \"TMe-815\"  #> [151] \"TMe-421\"  \"TMe-2329\" \"TMe-2916\" \"TMe-1137\" \"TMe-2043\" \"TMe-289\"  #> [157] \"TMe-93\"   \"TMe-3467\" \"TMe-3200\" \"TMe-3382\" \"TMe-3406\" \"TMe-85\"   #> [163] \"TMe-1945\" \"TMe-27\"   \"TMe-2968\" \"TMe-1646\" \"TMe-1992\" \"TMe-3592\" #> [169] \"TMe-1738\" \"TMe-1248\" \"TMe-2897\" \"TMe-5\"    \"TMe-267\"  \"TMe-584\"  #> [175] \"TMe-3401\" \"TMe-3230\" \"TMe-926\"  \"TMe-3234\" \"TMe-2733\" \"TMe-3222\" #> [181] \"TMe-3071\" \"TMe-3565\" \"TMe-3046\" \"TMe-3571\" \"TMe-832\"  \"TMe-3007\" #> [187] \"TMe-1004\" \"TMe-2984\" \"TMe-3596\" \"TMe-2751\" \"TMe-1775\" \"TMe-2843\" #> [193] \"TMe-925\"  \"TMe-3299\" \"TMe-3329\" \"TMe-1388\" \"TMe-1273\" \"TMe-3721\" #> [199] \"TMe-3663\" \"TMe-1098\" \"TMe-7\"    \"TMe-2906\" \"TMe-2151\" \"TMe-2940\" #> [205] \"TMe-2756\" \"TMe-745\"  \"TMe-3572\" \"TMe-3451\" \"TMe-742\"  \"TMe-3130\" #> [211] \"TMe-3659\" \"TMe-3277\" \"TMe-473\"  \"TMe-2995\" \"TMe-2998\" \"TMe-3493\" #> [217] \"TMe-2976\" \"TMe-863\"  \"TMe-3087\" \"TMe-2802\" \"TMe-3066\" \"TMe-3302\" #> [223] \"TMe-835\"  \"TMe-1579\" \"TMe-698\"  \"TMe-2914\" \"TMe-1600\" \"TMe-1580\" #> [229] \"TMe-64\"   \"TMe-842\"  \"TMe-3631\" \"TMe-3346\" \"TMe-3085\" \"TMe-3255\" #> [235] \"TMe-3544\" \"TMe-853\"  \"TMe-1817\" \"TMe-438\"  \"TMe-3533\" \"TMe-589\"  #> [241] \"TMe-886\"  \"TMe-2862\" \"TMe-2119\" \"TMe-365\"  \"TMe-3207\" \"TMe-2811\" #> [247] \"TMe-2361\" \"TMe-44\"   \"TMe-2355\" \"TMe-1160\" \"TMe-3599\" \"TMe-3531\" #> [253] \"TMe-39\"   \"TMe-635\"  \"TMe-1218\" \"TMe-6\"    \"TMe-1725\" \"TMe-3498\" #> [259] \"TMe-1286\" \"TMe-3238\" \"TMe-3118\" \"TMe-3352\" \"TMe-1958\" \"TMe-1398\" #> [265] \"TMe-694\"  \"TMe-1401\" \"TMe-2981\" \"TMe-203\"  \"TMe-773\"  \"TMe-2901\" #> [271] \"TMe-304\"  \"TMe-3101\" \"TMe-1444\" \"TMe-1792\" \"TMe-3088\" \"TMe-2040\" #> [277] \"TMe-3133\" \"TMe-1079\" \"TMe-2912\" \"TMe-34\"   \"TMe-3575\" \"TMe-3608\" #> [283] \"TMe-312\"  \"TMe-787\"  \"TMe-3440\" \"TMe-3433\" \"TMe-700\"  \"TMe-601\"  #> [289] \"TMe-2551\" \"TMe-2004\" \"TMe-394\"  \"TMe-2518\" \"TMe-946\"  \"TMe-3707\" #> [295] \"TMe-1838\" \"TMe-3026\" \"TMe-2374\" \"TMe-3434\" \"TMe-2748\" \"TMe-617\"  #> [301] \"TMe-2910\" \"TMe-3043\" \"TMe-400\"  \"TMe-2966\" \"TMe-1875\" \"TMe-976\"  #> [307] \"TMe-3112\" \"TMe-360\"  \"TMe-2860\" \"TMe-3480\" \"TMe-3209\" \"TMe-2957\" #> [313] \"TMe-196\"  \"TMe-3569\" \"TMe-2158\" \"TMe-2304\" \"TMe-363\"  \"TMe-1472\" #> [319] \"TMe-3772\" \"TMe-43\"   \"TMe-1461\" \"TMe-1988\" \"TMe-3055\" \"TMe-15\"   #> [325] \"TMe-656\"  \"TMe-434\"  \"TMe-3324\" \"TMe-391\"  \"TMe-1147\" \"TMe-33\"   #> [331] \"TMe-154\"  \"TMe-3443\" \"TMe-148\"  \"TMe-59\"   \"TMe-3601\" \"TMe-1198\" #> [337] \"TMe-3114\" \"TMe-3032\" \"TMe-160\"  \"TMe-298\"  \"TMe-1311\" \"TMe-3185\" #> [343] \"TMe-2128\" \"TMe-3458\" \"TMe-3781\" \"TMe-1819\" \"TMe-830\"  \"TMe-1814\" #> [349] \"TMe-1787\" \"TMe-3148\" \"TMe-3359\" \"TMe-3357\" \"TMe-340\"  \"TMe-2814\" #> [355] \"TMe-2530\" \"TMe-47\"   \"TMe-645\"  \"TMe-2383\" \"TMe-2809\" \"TMe-2973\" #> [361] \"TMe-1622\" \"TMe-1026\" \"TMe-3639\" \"TMe-729\"  \"TMe-25\"   \"TMe-3633\" #> [367] \"TMe-2937\" \"TMe-2226\" \"TMe-404\"  \"TMe-1006\" \"TMe-1101\" \"TMe-3445\" #> [373] \"TMe-383\"  \"TMe-4\"    \"TMe-2997\" \"TMe-2285\" \"TMe-1074\" \"TMe-1272\" #> [379] \"TMe-3326\" \"TMe-477\"  \"TMe-1250\" \"TMe-3383\" \"TMe-1312\" \"TMe-736\"  #> [385] \"TMe-3284\" \"TMe-280\"  \"TMe-995\"  \"TMe-1505\" \"TMe-3256\" \"TMe-878\"  #> [391] \"TMe-930\"  \"TMe-2257\" \"TMe-826\"  \"TMe-3679\" \"TMe-1420\" \"TMe-1521\" #> [397] \"TMe-1766\" \"TMe-1042\" \"TMe-3020\" \"TMe-3128\" \"TMe-279\"  \"TMe-123\"  #> [403] \"TMe-3557\" \"TMe-1762\" \"TMe-2217\" \"TMe-1227\" \"TMe-1790\" \"TMe-600\"  #> [409] \"TMe-2956\" \"TMe-754\"  \"TMe-3481\" \"TMe-2242\""}]
